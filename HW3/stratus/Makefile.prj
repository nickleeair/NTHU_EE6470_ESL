
##############################################################################
# Makefile generated by bdw_makegen version 21.20-p100
#      Cadence Design Systems
#      Thu May 11 16:08:50 CST 2023
#          Project file was </users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl>
##############################################################################

GENERATING_STRATUS_VERSION = 21.20-p100

# Check that we have Stratus on our path
ifneq ($(shell if `which bdw_shell >&/dev/null` ; then echo 1; fi),1)
    $(error Stratus executable was not found. Please add Stratus installation to your search path, and run 'bdw_makegen' command.)
endif

CURRENT_STRATUS_VERSION := $(shell bdw_shell -version)
CURRENT_STRATUS_VERSION := $(shell echo $(CURRENT_STRATUS_VERSION) | cut -d ' ' -f 3)

# Check that this Makefile.prj was generated by the current stratus version
ifneq ($(CURRENT_STRATUS_VERSION),$(GENERATING_STRATUS_VERSION))
    $(error The Makefile.prj was created with a different version of Stratus. Please run 'bdw_makegen' command to re-generate Makefile.prj.)                                                                          
endif

# Dependencies on tcl files source by the project file.
Makefile.prj: project.tcl

######################################################################
## Exported variables.  
## Each of these variables will be accessible to all child processes.
######################################################################

export BDW_TECH_LIBS	=	/tools/linux/cadence/STRATUS/cur/share/stratus/techlibs/GPDK045/gsclib045_svt_v4.4/gsclib045/timing/slow_vdd1v2_basicCells.lib
export BDW_WORKLIB
ifeq ($(BDW_WORKLIB),)
	BDW_WORKLIB = bdw_work
endif

ifeq ($(shell if `which bdw_shell >&/dev/null` ; then echo 1; fi),1)
export STRATUS_HOME := $(shell echo "puts [get_install_path]" | bdw_shell)
else
export STRATUS_HOME := /tools/linux/cadence/STRATUS/cur
endif
export STRATUS_PLATFORM := lnx86

export BDW_TCL_DIR = $(STRATUS_HOME)/share/stratus/tcl


export BDW_SYSTEMC_VERSION = 2.3.3


# Use internal SystemC 2.3.3 for simulation
export SYSTEMC := $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/systemc/2.3.3


# Use builtin gcc 9.3 for simulations.
export BDW_CC := $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/gcc/9.3/bin/g++
export BDW_AR := $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/gcc/9.3/bin/ar rc
export BDW_CCDEP := $(BDW_CC)
export BDW_LINK := $(BDW_CC)



ifeq ($(BDW_DEBUG),1)
BDW_DEBUG_DIR = /debug
else
BDW_DEBUG_DIR =
endif

ifeq ($(BDW_GENDEP),)
export BDW_GENDEPS=0
endif
export ARITH_HOME = /tools/linux/cadence/STRATUS/cur/tools.lnx86/cellmath
export BDW_USE_ESCLIB = 1
export BDW_VERILOG_DIALECT = 1995
export BDW_OBJDIR		=	$(BDW_WORKLIB)/objs
export BDW_SIMDIR		=	$(BDW_WORKLIB)/sims
export BDW_MODULEDIR	=	$(BDW_WORKLIB)/modules
export BDW_LIBDIR		=	$(BDW_WORKLIB)/libs
export BDW_WRAPDIR		=	$(BDW_WORKLIB)/wrappers
export BDW_HLSLIB_DIRS
export BDW_HLSLIB_NAMES
export BDW_PROJECT_FILE =   /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl
export BDW_SIM_CONFIG
export BDW_SIM_CONFIG_DIR
export BDW_LS_CONFIG
export BDW_LS_CONFIG_DIR
export BDW_LS_CONFIG_LOGS
export BDW_VRTL_FILE
export BDW_MODULE
export BDW_HLS_CONFIG
export BDW_HLS_CONFIG_DIR
export BDW_CYNTH_CONFIG
export BDW_CYNTH_CONFIG_DIR
export BDW_LS_INFO

export BDW_VISTA = 0
export BDW_NCSC = 0
export BDW_XMSC = 1
export BDW_VLOGSIM_ARGS
export BDW_VLOGCOMP_ARGS
export BDW_VLOG_LIBS
export BDW_VLOG_DEFINES
export BDW_VLOG_DUT_FILES
export BDW_VLOG_DUMPFILE
export BDW_EXTRA_LDFLAGS
export BDW_EXTRA_LIBS
export BDW_EXTRA_LIB_FLAGS
export BDW_COV_LIB_FLAGS
export BDW_EXTRA_CCFLAGS
export BDW_CCOPTIONS
export BDW_SCSIM_ARGS
export BDW_HUB_ARGV
export BDW_USE_SCV
export BDW_FSDBVCSPLATFORM
BDW_FSDBVCSPLATFORM = LINUX64
export BDW_USE_SCV = 0
ifeq ($(CM_USERLOGDIR),)
	export CM_USERLOGDIR = $(shell pwd)/$(BDW_WORKLIB)/tmp
endif
ifeq ($(CM_USERTMPDIR),)
	export CM_USERTMPDIR = $(shell pwd)/$(BDW_WORKLIB)/tmp
endif

# Provide backwards compatibility with CONF variable used in some applications
# to set the configuration on the command line.
ifneq ($(CONF),)
	BDW_SIM_CONFIG = $(CONF)
endif


######################################################################
## Definitions for remote execution
######################################################################
export BDW_EXEC_CMD
export BDW_PMAKE_FLG
ifeq ($(BDW_EXEC_CMD),)
    BDW_EXEC_CMD=
endif

######################################################################
## Definitions for user defined tool command scripts
######################################################################



ifeq ($(BDW_STRATUS_HLS_COMMAND),)
    BDW_STRATUS_HLS_COMMAND = stratus_hls
endif
ifeq ($(BDW_STRATUS_IDE_COMMAND),)
    BDW_STRATUS_IDE_COMMAND = stratus_ide
endif
ifeq ($(BDW_WRAPGEN_COMMAND),)
    BDW_WRAPGEN_COMMAND = bdw_wrapgen
endif
ifeq ($(BDW_LAUNCH_UPDATE_WRAPPERS_COMMAND),)
    BDW_LAUNCH_UPDATE_WRAPPERS_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_HLS_COMMAND),)
    BDW_LAUNCH_HLS_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_SIM_COMMAND),)
    BDW_LAUNCH_SIM_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND),)
    BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_POWER_COMMAND),)
    BDW_LAUNCH_POWER_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_ANALYSIS_COMMAND),)
    BDW_LAUNCH_ANALYSIS_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_EQUIV_COMMAND),)
    BDW_LAUNCH_EQUIV_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_IDE_COMMAND),)
    BDW_LAUNCH_IDE_COMMAND = $(BDW_LAUNCH_COMMAND)
endif

######################################################################
## Definitions for compilation and synthesis
######################################################################

MAKE			   = make --no-print-directory -f $(firstword $(MAKEFILE_LIST))
PERL			   = perl
CYNTHHL            = $(BDW_STRATUS_HLS_COMMAND)
CYNTHVLG		   = ${STRATUS_HOME}/bin/stratus_vlg --project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl
ifneq ($(BDW_TMPLNK_DIR),)
BDW_TMPLNK_FILE    := $(shell $(STRATUS_HOME)/bin/bdw_tmpfile $(BDW_TMPLNK_DIR)/BDWLNK.$(USER).XXXXXX)
endif

######################################################################
## Set variables for and include BDW common Makefile bdw.mak
######################################################################

export BDW_USEHUB	   = $(BDW_USE_ESCLIB)
export BDW_USECYNTH	   = 1
export BDW_WRITEFSDB   = 0
ifeq ($(BDW_WRITEFSDB),1)
	export BDW_NOVAS_INST_DIR = $(shell $(STRATUS_HOME)/bin/bdw_find_novas_install)
	ifeq ($(wildcard $(BDW_NOVAS_INST_DIR)/share/PLI/VCS*),$(BDW_NOVAS_INST_DIR)/share/PLI/VCS)
		# The PLI/VCS dir is an indication that this is a 2010 or later Novas release, and we can use automatic VCS platform selection.
		BDW_FSDB_VCS_ARGS = -debug_pp -LDFLAGS -Wl,-rpath,$(BDW_NOVAS_INST_DIR)/share/PLI/VCS/$(BDW_FSDBVCSPLATFORM) -P $(BDW_NOVAS_INST_DIR)/share/PLI/VCS/$(BDW_FSDBVCSPLATFORM)/novas.tab $(BDW_NOVAS_INST_DIR)/share/PLI/VCS/$(BDW_FSDBVCSPLATFORM)/pli.a
	else
		# For older versions of Novas, use vcs_latest, which works with all supported VCS versions.
		BDW_FSDB_VCS_ARGS = -P $(BDW_NOVAS_INST_DIR)/share/PLI/vcs_latest/$(BDW_FSDBVCSPLATFORM)/novas.tab $(BDW_NOVAS_INST_DIR)/share/PLI/vcs_latest/$(BDW_FSDBVCSPLATFORM)/pli.a
	endif
else
	BDW_FSDB_VCS_ARGS =
endif
BDW_INCLUDE_DIRS = ..
BDW_CCFLAGS        = -I./ -I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(addprefix -I,$(BDW_INCLUDE_DIRS))
ifneq ($(BDW_SIM_CONFIG),)
    BDW_SOURCES		   += ../main.cpp ../Testbench.cpp ../System.cpp
endif
BDW_CCOPTIONS	   = -DCLOCK_PERIOD=10.0 -g 
BDW_COV_LIB_FLAGS = 
BDW_DEP_FILTER	   = | bdw_depfilter /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl

VPATH += $(BDW_INCLUDE_DIRS)

vpath %.bdt $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/lib

BDW_LOGOPTIONS_FILE = $(BDW_WRAPDIR)/.logOptions

# rule to create .logOptions if it gets accidentally removed
$(BDW_LOGOPTIONS_FILE): /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl
	@bdw_makegen /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -q 

######################################################################
# Preparation for concurrent builds target
######################################################################


ifeq ($(CWBExec_prep),1)
prep_all all_deps: 
	$(BDW_LAUNCH_UPDATE_WRAPPERS_COMMAND) $(MAKE) update_hierarchy prep_vlog_all gen_all_deps
else
prep_all all_deps:
	bdw_exec -jobproject $(BDW_PROJECT_FILE) -job prep_all $(MAKE) CWBExec_prep=1 prep_all
endif


######################################################################
## Start of Configurations
######################################################################
BDW_SHAREDLIB		=	0
BDW_VLOG_DUT_FILES	=	
VLOG_COSIM_TOP	=
BDW_ALL_WRAPPERS    =


HL_FLAGS           = --logfile=stratus_hls.log -I. -I$(BDW_WRAPDIR) -I$(STRATUS_HOME)/share/stratus/include --c++14 $(BDW_EXTRA_HLFLAGS) $(addprefix --tl=,$(BDW_TECH_LIBS)) --clock_period=10.000 --message_detail=3
VLG_FLAGS          = -DBDW_RTL=1 -I$(BDW_WRAPDIR) --c++14 $(BDW_EXTRA_VLGFLAGS)

HL_FLAGS_Filters_BASIC	= -DBASIC=1 -DBDW_RTL_Filters_BASIC=1 $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filters_BASIC)))
HL_FLAGS_Filters_DPA	= -DDPA=1 -DBDW_RTL_Filters_DPA=1 --dpopt_auto=op,expr $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filters_DPA)))
HL_FLAGS_Filters_UNROLL	= -DUNROLL=1 -DBDW_RTL_Filters_UNROLL=1 --dpopt_auto=op,expr $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filters_UNROLL)))
HL_FLAGS_Filters_PIPELINE	= -DPIPELINE=1 -DBDW_RTL_Filters_PIPELINE=1 --dpopt_auto=op,expr $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filters_PIPELINE)))
HL_FLAGS_Filters_LATENCY	= -DLATENCY=1 -DBDW_RTL_Filters_LATENCY=1 --dpopt_auto=op,expr $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filters_LATENCY)))
HL_FLAGS_Filters_UNROLL_PIPE	= -DUNROLL_PIPE=1 -DBDW_RTL_Filters_UNROLL_PIPE=1 --dpopt_auto=op,expr $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filters_UNROLL_PIPE)))
HL_FLAGS_Filters_LATENCY_PIPE	= -DLATENCY_PIPE=1 -DBDW_RTL_Filters_LATENCY_PIPE=1 --dpopt_auto=op,expr $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filters_LATENCY_PIPE)))
BDW_ALL_WRAPPERS += $(BDW_WORKLIB)/wrappers/Filters_wrap.h
ifeq ($(BDW_SIM_CONFIG),B)
BDW_HUB_ARGV = ../lena_std_short.bmp out.bmp



BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Filters.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/Filters.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         +=  
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	../Filters.cpp
VLOG_COSIM_TOP		=	
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	 
BDW_VLOG_LIBS		=	
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/Filters_wrap.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Filters.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Testbench.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/System.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/Filters.d 
SIM_RTL_TARGETS		=

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	
	BDW_VLOG_SIM_PATH =	
endif


else
ifeq ($(BDW_SIM_CONFIG),V_BASIC)
BDW_HUB_ARGV = ../lena_std_short.bmp out.bmp

BDW_SHAREDLIB		= 1

BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filters/BASIC/debug/Filters.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filters/BASIC/Filters.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_Filters_BASIC 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_V_BASIC.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/Filters_cosim.v $(BDW_WORKLIB)/modules/Filters/BASIC/Filters_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/Filters/BASIC/v_rtl
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_Filters_BASIC
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_Filters_BASIC
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/Filters_wrap.d $(BDW_WORKLIB)/modules/Filters/BASIC/Filters.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Testbench.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/System.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/Filters.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/Filters/BASIC/Filters_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	xcelium
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),V_DPA)
BDW_HUB_ARGV = ../lena_std_short.bmp out.bmp

BDW_SHAREDLIB		= 1

BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filters/DPA/debug/Filters.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filters/DPA/Filters.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_Filters_DPA 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_V_DPA.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/Filters_cosim.v $(BDW_WORKLIB)/modules/Filters/DPA/Filters_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/Filters/DPA/v_rtl
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_Filters_DPA
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_Filters_DPA
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/Filters_wrap.d $(BDW_WORKLIB)/modules/Filters/DPA/Filters.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Testbench.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/System.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/Filters.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/Filters/DPA/Filters_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	xcelium
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),V_UNROLL)
BDW_HUB_ARGV = ../lena_std_short.bmp out.bmp

BDW_SHAREDLIB		= 1

BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filters/UNROLL/debug/Filters.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filters/UNROLL/Filters.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_Filters_UNROLL 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_V_UNROLL.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/Filters_cosim.v $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/Filters/UNROLL/v_rtl
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_Filters_UNROLL
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_Filters_UNROLL
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/Filters_wrap.d $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Testbench.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/System.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/Filters.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	xcelium
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),V_PIPELINE)
BDW_HUB_ARGV = ../lena_std_short.bmp out.bmp

BDW_SHAREDLIB		= 1

BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filters/PIPELINE/debug/Filters.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_Filters_PIPELINE 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_V_PIPELINE.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/Filters_cosim.v $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/Filters/PIPELINE/v_rtl
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_Filters_PIPELINE
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_Filters_PIPELINE
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/Filters_wrap.d $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Testbench.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/System.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/Filters.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	xcelium
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),V_LATENCY)
BDW_HUB_ARGV = ../lena_std_short.bmp out.bmp

BDW_SHAREDLIB		= 1

BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filters/LATENCY/debug/Filters.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filters/LATENCY/Filters.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_Filters_LATENCY 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_V_LATENCY.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/Filters_cosim.v $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/Filters/LATENCY/v_rtl
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_Filters_LATENCY
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_Filters_LATENCY
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/Filters_wrap.d $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Testbench.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/System.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/Filters.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	xcelium
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),V_UNROLL_PIPE)
BDW_HUB_ARGV = ../lena_std_short.bmp out.bmp

BDW_SHAREDLIB		= 1

BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/debug/Filters.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_Filters_UNROLL_PIPE 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_V_UNROLL_PIPE.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/Filters_cosim.v $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/v_rtl
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_Filters_UNROLL_PIPE
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_Filters_UNROLL_PIPE
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/Filters_wrap.d $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Testbench.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/System.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/Filters.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	xcelium
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),V_LATENCY_PIPE)
BDW_HUB_ARGV = ../lena_std_short.bmp out.bmp

BDW_SHAREDLIB		= 1

BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/debug/Filters.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_Filters_LATENCY_PIPE 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_V_LATENCY_PIPE.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/Filters_cosim.v $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/v_rtl
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_Filters_LATENCY_PIPE
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_Filters_LATENCY_PIPE
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/Filters_wrap.d $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Testbench.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/System.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/Filters.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	xcelium
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else

BDW_MISSING_WRAPPERS=	
ifneq ($(BDW_DEP_CYNTH_CONFIG),)
DEP_FILES           =   bdw_work/wrappers/Filters_wrap.d
endif
endif
endif
endif
endif
endif
endif
endif
endif

################################################################
# List of all dep files outside sim_configs for make all_deps
################################################################
BDW_DEP_FILES = $(BDW_WORKLIB)/wrappers/Filters_wrap.d $(BDW_WORKLIB)/modules/Filters/BASIC/Filters.d $(BDW_WORKLIB)/modules/Filters/DPA/Filters.d $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters.d $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters.d $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters.d $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters.d $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters.d


################################################################
# start of logicSynth Configurations
################################################################

# global logicSynth definitions


        
# logicSynthConfig specific definitions


################################################################
# start of analysis Configurations
################################################################

# global analysis definitions


        
# analysisConfig specific definitions


ifeq ($(BDW_SHAREDLIB),0)
	EXECUTABLE			= scsim_$(BDW_SIM_CONFIG)
	
ifeq ($(BDW_DEBUG),1)
SIM_BUILD			= $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/debug/sim_$(BDW_SIM_CONFIG)
else
SIM_BUILD			= $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG)
endif
else
	EXECUTABLE			= $(BDW_VLOG_SIM)

ifeq ($(BDW_DEBUG),1)
    COSIM_FILES			= $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/debug/sim_$(BDW_SIM_CONFIG).so $(VLOG_COSIM_TOP)
else
    COSIM_FILES			= $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG).so $(VLOG_COSIM_TOP)
endif
	SIM_BUILD			= $(COSIM_FILES)
endif


################################################################
# start of place and route configurations
################################################################

# pnrConfig specific definitions 

######################################################################
# Include dependency files for this configuration.
# These will be automatically generted if they do not exist.
# Avoid including (and so generating) these files for 'clean' and
# 'help' commands.
######################################################################
ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
    ifeq ($(findstring clean,$(MAKECMDGOALS)),)
        ifeq ($(findstring help,$(MAKECMDGOALS)),)
            ifneq ($(DEP_FILES),)
                -include $(DEP_FILES)
            endif
            ifneq ($(SIM_DEP_FILES),)
                ifeq ($(BDW_GENDEPS),1)
                    -include $(SIM_DEP_FILES)
                endif
            endif
        endif
    endif
endif

######################################################################
## Include pre-defined variables and rules provided with BDW
######################################################################

include ${STRATUS_HOME}/share/stratus/source/bdw.mak

######################################################################
## Error checking rules for variable and environment settings.
######################################################################
vista_needs_gcc3:
ifeq ($(BDW_GCC_VERSION),2.95.3)
	@echo "*** You must use GCC 3 to use Vista." ;  exit
endif

#########################################################
## Start of the "ALL" rule set
#########################################################

pnr_all:


kill_pnr_all:


clean_pnr_all:


power_all:


kill_power_all:


clean_power_all:


equiv_all:


kill_equiv_all:


clean_equiv_all:


ls_all:


kill_ls_all:


clean_ls_all:


analysis_all:


kill_analysis_all:


clean_analysis_all:


hls_sim_all: hls_B hls_V_BASIC hls_V_DPA hls_V_UNROLL hls_V_PIPELINE hls_V_LATENCY hls_V_UNROLL_PIPE hls_V_LATENCY_PIPE


hls_all: hls_Filters_BASIC hls_Filters_DPA hls_Filters_UNROLL hls_Filters_PIPELINE hls_Filters_LATENCY hls_Filters_UNROLL_PIPE hls_Filters_LATENCY_PIPE


hls_Filters_all: hls_Filters_BASIC hls_Filters_DPA hls_Filters_UNROLL hls_Filters_PIPELINE hls_Filters_LATENCY hls_Filters_UNROLL_PIPE hls_Filters_LATENCY_PIPE


cynth_all: cynth_B cynth_V_BASIC cynth_V_DPA cynth_V_UNROLL cynth_V_PIPELINE cynth_V_LATENCY cynth_V_UNROLL_PIPE cynth_V_LATENCY_PIPE


kill_hls_all kill_cynth_all: kill_hls_Filters_BASIC kill_hls_Filters_DPA kill_hls_Filters_UNROLL kill_hls_Filters_PIPELINE kill_hls_Filters_LATENCY kill_hls_Filters_UNROLL_PIPE kill_hls_Filters_LATENCY_PIPE


gen_all_deps: 
	-@$(MAKE) $(BDW_DEP_FILES)


.PHONY: gen_all_deps
.PHONY: all_deps


all_wrappers : bdw_prebuild_wrappers

bdw_prebuild_wrappers:
ifneq ($(BDW_ALL_WRAPPERS),)
	@$(MAKE) -j 1 $(BDW_ALL_WRAPPERS)
endif

bdw_prebuild_rtl:
ifneq ($(SIM_RTL_TARGETS),)
	@$(MAKE) $(SIM_RTL_TARGETS)
endif


clean_hls_all: clean_hls_B clean_hls_V_BASIC clean_hls_V_DPA clean_hls_V_UNROLL clean_hls_V_PIPELINE clean_hls_V_LATENCY clean_hls_V_UNROLL_PIPE clean_hls_V_LATENCY_PIPE

hls_clean_all: clean_hls_all
cynth_clean_all: clean_hls_all
clean_cynth_all: clean_hls_all
prebuild_all: prebuild_B prebuild_V_BASIC prebuild_V_DPA prebuild_V_UNROLL prebuild_V_PIPELINE prebuild_V_LATENCY prebuild_V_UNROLL_PIPE prebuild_V_LATENCY_PIPE

build_all: build_B build_V_BASIC build_V_DPA build_V_UNROLL build_V_PIPELINE build_V_LATENCY build_V_UNROLL_PIPE build_V_LATENCY_PIPE

sim_all: sim_B sim_V_BASIC sim_V_DPA sim_V_UNROLL sim_V_PIPELINE sim_V_LATENCY sim_V_UNROLL_PIPE sim_V_LATENCY_PIPE

kill_sim_all: kill_sim_B kill_sim_V_BASIC kill_sim_V_DPA kill_sim_V_UNROLL kill_sim_V_PIPELINE kill_sim_V_LATENCY kill_sim_V_UNROLL_PIPE kill_sim_V_LATENCY_PIPE

clean_wrap_all: clean_wrap_B clean_wrap_V_BASIC clean_wrap_V_DPA clean_wrap_V_UNROLL clean_wrap_V_PIPELINE clean_wrap_V_LATENCY clean_wrap_V_UNROLL_PIPE clean_wrap_V_LATENCY_PIPE

kill_all: 
	@bdw_kill -all


clean_cachelib:
	@rm -rf /users/student/mr110/yslee21/ee6470/HW3/stratus/cachelib

clean_all:
	@if [ -d $(BDW_WORKLIB) ] ; then \
		td=`mktemp -d $(BDW_WORKLIB).XXXXXXXX` ; \
		mv $(BDW_WORKLIB) $${td} ; \
		for f in *.vcd *.fsdb ; do \
			if [ -f $$f ] ; then \
				mv $$f $${td} ; \
			fi ; \
		done ; \
		rm -rf $${td} & \
	fi

clean_sim_all: clean_B clean_V_BASIC clean_V_DPA clean_V_UNROLL clean_V_PIPELINE clean_V_LATENCY clean_V_UNROLL_PIPE clean_V_LATENCY_PIPE clean_deps
	@rm -rf *.vcd *.fsdb $(BDW_OBJDIR) $(BDW_SIMDIR) $(BDW_MODULEDIR) $(BDW_WRAPDIR)

jobs:
	@bdw_ps

clean_libs:
	@rm -rf $(BDW_LIBDIR)

clean_deps:
	@if [ -d $(BDW_WORKLIB) ]; then find $(BDW_WORKLIB) -name '*.d' -exec rm {} \; ; fi

deps : $(DEP_FILES)

#########################################################
## End of the "ALL" rule set
#########################################################



#########################################################
## Start of the "config groups" rule set
#########################################################
        

#########################################################
## End of the "config groups" rule set
#########################################################
        

help:
	@echo 
	@echo "Makefile generated by bdw_makegen version 21.20-p100 from /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl"
	@echo 
	@echo "PROJECT-WIDE RULES:"
	@echo "    workbench   - Stratus Workbench for the project."
	@echo "    help-configs - List all configs defined in the project."
	@echo 
	@echo "GROUP RULES:"
	@echo "    hls_all             - Run stratus_hls for all modules for all configurations."
	@echo "    hls_sim_all         - Run stratus_hls for all modules that are RTL_V in a sim_config."
	@echo "    clean_hls_all       - Clear all RTL files generated for all stratus_hls runs for each configuration."
	@echo "    ls_all             - Run logic synthesis for all logic synthesis configs "
	@echo "    clean_ls_all       - Removes logic synthesis results for all logic synthesis configs "
	@echo "    build_all           - Build all simulation executables or shared libraries (but don't run them)."
	@echo "    sim_all             - Build AND run all simulation configurations."
	@echo "    power_all           - Run all Power configurations."
	@echo "    pnr_all             - Run all place and route configurations."
	@echo "    equiv_all           - Run all whole-design equivalence checking configurations."
	@echo "    clean_all           - Removes the $(BDW_WORKLIB) directory, thus cleaning up everything."
	@echo "    clean_sim_all       - Clean up all modules for all simulation configurations."
	@echo "    clean_power_all     - Clean all files generated for all power estimation configs."
	@echo "    clean_pnr_all       - Clean all files generated for all place and route configs."
	@echo "    clean_equiv_all     - Clean all files generated for all equivalence checking configs."
	@echo "    clean_libs          - Clean up all locally built items for hls_libs."
	@echo "    clean_cachelib      - Clean up the local Cache Library."
	@echo "    clean_deps          - Clean up auto-generated dependencies so they will be re-generated."
	@echo "    clean_wrap_all      - Clean all generated wrapper files."
	@echo "    all_deps            - Re-creates all dependencies."
	@echo "    all_wrappers        - Generates all out of date hls_module wrappers."
	@echo "    jobs                - List all current jobs for this project."
	@echo "    kill_all            - Kills alls current jobs for this project."
	@echo "    kill_hls_all        - Kills alls stratus_hls jobs for this project."
	@echo "    kill_ls_all         - Kill all logic synthesis jobs for this project."
	@echo "    kill_sim_all        - Kill all simulation jobs for this project."
	@echo "    kill_pnr_all        - Kill all place and route jobs for this project."
	@echo "    kill_power_all      - Kill all power estimation jobs for this project."
	@echo "    kill_hls_<config_group>_<hls_config>  - Kill all the stratus_hls jobs for a config group"
	@echo "    kill_equiv_all      - Kill all equivalence checking jobs for this project."
	@echo 
	@echo "PER-hls_config RULES:"
	@echo "    hls_<hls_config>   - Run stratus_hls on all modules that have a hls_config with the given name to Verilog"
	@echo "    hhls_<module>_<hls_config>  - Run stratus_hls on the given module and its submodules and hls_config to Verilog"
	@echo "    hls_<config_group>  - Run stratus_hls on the modules in a config group specified by define_config_group command"
	@echo "    clean_<hls_config> - Clean the given hls_config from all modules that have it"
	@echo "    view_<hls_config>  - View schematics for all modules that have a hls_config with the given name"
	@echo "    view_<sim_config>  - View waveforms for the simulation (waveform viewer tool is choosen from project file)"
	@echo 
	@echo "PER-module-and-hls_config RULES:"
	@echo "    hls_<module>_all            - Run stratus_hls on the given module and all its hls_configs to Verilog"
	@echo "    hls_<module>_<hls_config>   - Run stratus_hls on the given module and hls_config to Verilog"
	@echo "    elab_<module>_<hls_config>  - Run stratus_hls through elaboration on the given module and hls_config"
	@echo "    optim_<module>_<hls_config> - Run stratus_hls through optimization on the given module and hls_config"
	@echo "    sched_<module>_<hls_config> - Run stratus_hls through scheduling on the given module and hls_config"
	@echo "    clean_hls_<module>_<hls_config>  - Clean synthesis results for the given module and hls_config"
	@echo "    view_<module>_<hls_config> - View schematic for the given module and hls_config"
	@echo "    kill_<module>_<hls_config> - Kill stratus_hls job for this module and hls_config"
	@echo 
	@echo "DEFINED module and hls_config NAMES:"
	@echo "	hls_config for module Filters:"
	@echo "		BASIC	DPA	UNROLL	PIPELINE"
	@echo "		LATENCY	UNROLL_PIPE	LATENCY_PIPE"
	@echo 
	@echo "PER-sim_config RULES:"
	@echo "    clean_hls_<sim_config> - Clean stratus_hls output files for all modules required by the named sim_config"
	@echo "    build_<sim_config>   - Build the simulation executable for the named sim_config"
	@echo "    sim_<sim_config>     - Builds and executes a simulation for the named sim_config"
	@echo "    kill_sim_<sim_config> - Kills the simulation for the  named sim_config"
	@echo "    debug_<sim_config>   - Builds a simulation for the named sim_config for use with the gdb debugger under stratus_ide"
	@echo "    view_<sim_config>    - View schematics for all modules required by the named sim_config"
	@echo "    clean_<sim_config>   - Clean up files built for the named sim_config"
	@echo 
	@echo "DEFINED sim_config NAMES:"

	@echo "	B	V_BASIC	V_DPA	V_UNROLL"
	@echo "	V_PIPELINE	V_LATENCY	V_UNROLL_PIPE	V_LATENCY_PIPE"

	@echo
	@echo "PER-logicSynthConfig Rules:"
	@echo "    ls_<logicSynthConfig> - Run logic synthesis for the modules in this logicSynthConfig"
	@echo "    view_ls_<logicSynthConfig> - View schematics for the modules in this logicSynthConfig"
	@echo "    clean_ls_<logicSynthConfig> - Removes logic synthesis results for this logicSynthConfig"
	@echo "    kill_ls_<logicSynthConfig> - Kills the logic synthesis job for this logicSynthConfig"
	@echo
	@echo "DEFINED logicSynthConfig NAMES:"

	@echo ""

help-configs:
	@echo 
	@echo "DEFINED module and hls_config NAMES:"
	@echo "	hls_config for module Filters:"
	@echo "		BASIC	DPA	UNROLL	PIPELINE"
	@echo "		LATENCY	UNROLL_PIPE	LATENCY_PIPE"
	@echo 
	@echo "DEFINED sim_config NAMES:"

	@echo "	B	V_BASIC	V_DPA	V_UNROLL"
	@echo "	V_PIPELINE	V_LATENCY	V_UNROLL_PIPE	V_LATENCY_PIPE"
	@echo
	@echo "DEFINED logicSynthConfig NAMES:"

	@echo ""

#########################################################
# rules for making parent simConfig links
#########################################################
parentLinks:
	@if [ ! -d $(BDW_SIM_CONFIG_DIR) ] ; then mkdir -p $(BDW_SIM_CONFIG_DIR) ; fi
	@cd $(BDW_SIM_CONFIG_DIR) ; \
	ln -sf ../$(BDW_PARENT_SIM)/xcelium ; \
	if [ -d ../$(BDW_PARENT_SIM)/xcelium.d ] ; then \
		ln -sf ../$(BDW_PARENT_SIM)/xcelium.d ; \
	fi; \
	ln -sf ../$(BDW_PARENT_SIM)/siminfo



#########################################################
## Start of the rule set for sim_config B
#########################################################


hls_B: 



cynth_B: 

hls_clean_B: clean_hls_B

cynth_clean_B: hls_clean_B

clean_hls_B: $(addprefix clean_, ) 

clean_cynth_B: clean_hls_B

prebuild_B: bdw_prebuild_wrappers 

ifeq ($(CWBExec_build),1)

dbg_build_B:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=B
	@$(MAKE) BDW_DEBUG=1 build_B


build_B build_B_sub: bdw_prebuild_wrappers 
	@$(MAKE) siminfo BDW_SIM_CONFIG=B
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=B BDW_GENDEPS=1

else
.PHONY: build_B
.PHONY: dbg_build_B

dbg_build_B:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job dbg_build.B $(MAKE) CWBExec_build=1 dbg_build_B

build_B:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job build.B $(MAKE) CWBExec_build=1 build_B

build_B_sub:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job build.B.s $(MAKE) CWBExec_build=1 build_B_sub
endif


ifeq ($(CWBExec_sim),1)
sim_B sim_sub_B: build_B_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=B 

else
.PHONY: sim_B

sim_B:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim.B $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_B 

sim_sub_B:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim_sub.B.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_B 
endif


kill_sim_B:
	@bdw_kill -job sim.B
	@bdw_kill -job sim.B.s


catlog_B: 
debug_B: 
	@$(MAKE) BDW_DEBUG=1 build_B
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=B RUN_DEBUGGER=1
    

view_B:
	@echo "Error: enable_waveform_logging is not enabled"
            


clean_wrap_B:
	@rm -f 
	@rm -rf $(BDW_WORKLIB)/sims/B $(BDW_WORKLIB)/sims/B/sim_B
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=B

clean_B: clean_hls_B clean_sim_B

clean_sim_B: clean_wrap_B
	@rm -rf $(BDW_WORKLIB)/jobs/sim.B.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.B
	@rm -rf $(BDW_WORKLIB)/jobs/build.B


#########################################################
## Start of the rule set for sim_config V_BASIC
#########################################################


hls_V_BASIC:  
	$(MAKE) -j1 hls_Filters_BASIC



cynth_V_BASIC:  
	$(MAKE) -j1 hlsc_Filters_BASIC

hls_clean_V_BASIC: clean_hls_V_BASIC

cynth_clean_V_BASIC: hls_clean_V_BASIC

clean_hls_V_BASIC: $(addprefix clean_, hls_Filters_BASIC) 

clean_cynth_V_BASIC: clean_hls_V_BASIC

prebuild_V_BASIC: bdw_prebuild_wrappers  
	$(MAKE) -j1 hls_Filters_BASIC

ifeq ($(CWBExec_build),1)

dbg_build_V_BASIC:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_BASIC
	@$(MAKE) BDW_DEBUG=1 build_V_BASIC


build_V_BASIC build_V_BASIC_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 hls_Filters_BASIC
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_BASIC
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=V_BASIC BDW_GENDEPS=1

else
.PHONY: build_V_BASIC
.PHONY: dbg_build_V_BASIC

dbg_build_V_BASIC:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job dbg_build.V_BASIC $(MAKE) CWBExec_build=1 dbg_build_V_BASIC

build_V_BASIC:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job build.V_BASIC $(MAKE) CWBExec_build=1 build_V_BASIC

build_V_BASIC_sub:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job build.V_BASIC.s $(MAKE) CWBExec_build=1 build_V_BASIC_sub
endif


ifeq ($(CWBExec_sim),1)
sim_V_BASIC sim_sub_V_BASIC: build_V_BASIC_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=V_BASIC 

else
.PHONY: sim_V_BASIC

sim_V_BASIC:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim.V_BASIC $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_V_BASIC 

sim_sub_V_BASIC:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim_sub.V_BASIC.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_V_BASIC 
endif


kill_sim_V_BASIC:
	@bdw_kill -job sim.V_BASIC
	@bdw_kill -job sim.V_BASIC.s


catlog_V_BASIC: catVLGLog_Filters_BASIC
debug_V_BASIC: 
	@$(MAKE) BDW_DEBUG=1 build_V_BASIC
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=V_BASIC RUN_DEBUGGER=1
    

view_V_BASIC:
	@echo "Error: enable_waveform_logging is not enabled"
            


clean_wrap_V_BASIC:
	@rm -f $(BDW_WORKLIB)/modules/Filters/BASIC/Filters_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/V_BASIC $(BDW_WORKLIB)/sims/V_BASIC/sim_V_BASIC.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=V_BASIC

clean_V_BASIC: clean_hls_V_BASIC clean_sim_V_BASIC

clean_sim_V_BASIC: clean_wrap_V_BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_BASIC.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/build.V_BASIC


$(BDW_WORKLIB)/sims/top_V_BASIC.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -simconfig V_BASIC -top top



#########################################################
## Start of the rule set for sim_config V_DPA
#########################################################


hls_V_DPA:  
	$(MAKE) -j1 hls_Filters_DPA



cynth_V_DPA:  
	$(MAKE) -j1 hlsc_Filters_DPA

hls_clean_V_DPA: clean_hls_V_DPA

cynth_clean_V_DPA: hls_clean_V_DPA

clean_hls_V_DPA: $(addprefix clean_, hls_Filters_DPA) 

clean_cynth_V_DPA: clean_hls_V_DPA

prebuild_V_DPA: bdw_prebuild_wrappers  
	$(MAKE) -j1 hls_Filters_DPA

ifeq ($(CWBExec_build),1)

dbg_build_V_DPA:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_DPA
	@$(MAKE) BDW_DEBUG=1 build_V_DPA


build_V_DPA build_V_DPA_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 hls_Filters_DPA
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_DPA
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=V_DPA BDW_GENDEPS=1

else
.PHONY: build_V_DPA
.PHONY: dbg_build_V_DPA

dbg_build_V_DPA:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job dbg_build.V_DPA $(MAKE) CWBExec_build=1 dbg_build_V_DPA

build_V_DPA:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job build.V_DPA $(MAKE) CWBExec_build=1 build_V_DPA

build_V_DPA_sub:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job build.V_DPA.s $(MAKE) CWBExec_build=1 build_V_DPA_sub
endif


ifeq ($(CWBExec_sim),1)
sim_V_DPA sim_sub_V_DPA: build_V_DPA_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=V_DPA 

else
.PHONY: sim_V_DPA

sim_V_DPA:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim.V_DPA $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_V_DPA 

sim_sub_V_DPA:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim_sub.V_DPA.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_V_DPA 
endif


kill_sim_V_DPA:
	@bdw_kill -job sim.V_DPA
	@bdw_kill -job sim.V_DPA.s


catlog_V_DPA: catVLGLog_Filters_DPA
debug_V_DPA: 
	@$(MAKE) BDW_DEBUG=1 build_V_DPA
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=V_DPA RUN_DEBUGGER=1
    

view_V_DPA:
	@echo "Error: enable_waveform_logging is not enabled"
            


clean_wrap_V_DPA:
	@rm -f $(BDW_WORKLIB)/modules/Filters/DPA/Filters_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/V_DPA $(BDW_WORKLIB)/sims/V_DPA/sim_V_DPA.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=V_DPA

clean_V_DPA: clean_hls_V_DPA clean_sim_V_DPA

clean_sim_V_DPA: clean_wrap_V_DPA
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_DPA.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_DPA
	@rm -rf $(BDW_WORKLIB)/jobs/build.V_DPA


$(BDW_WORKLIB)/sims/top_V_DPA.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -simconfig V_DPA -top top



#########################################################
## Start of the rule set for sim_config V_UNROLL
#########################################################


hls_V_UNROLL:  
	$(MAKE) -j1 hls_Filters_UNROLL



cynth_V_UNROLL:  
	$(MAKE) -j1 hlsc_Filters_UNROLL

hls_clean_V_UNROLL: clean_hls_V_UNROLL

cynth_clean_V_UNROLL: hls_clean_V_UNROLL

clean_hls_V_UNROLL: $(addprefix clean_, hls_Filters_UNROLL) 

clean_cynth_V_UNROLL: clean_hls_V_UNROLL

prebuild_V_UNROLL: bdw_prebuild_wrappers  
	$(MAKE) -j1 hls_Filters_UNROLL

ifeq ($(CWBExec_build),1)

dbg_build_V_UNROLL:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_UNROLL
	@$(MAKE) BDW_DEBUG=1 build_V_UNROLL


build_V_UNROLL build_V_UNROLL_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 hls_Filters_UNROLL
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_UNROLL
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=V_UNROLL BDW_GENDEPS=1

else
.PHONY: build_V_UNROLL
.PHONY: dbg_build_V_UNROLL

dbg_build_V_UNROLL:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job dbg_build.V_UNROLL $(MAKE) CWBExec_build=1 dbg_build_V_UNROLL

build_V_UNROLL:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job build.V_UNROLL $(MAKE) CWBExec_build=1 build_V_UNROLL

build_V_UNROLL_sub:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job build.V_UNROLL.s $(MAKE) CWBExec_build=1 build_V_UNROLL_sub
endif


ifeq ($(CWBExec_sim),1)
sim_V_UNROLL sim_sub_V_UNROLL: build_V_UNROLL_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=V_UNROLL 

else
.PHONY: sim_V_UNROLL

sim_V_UNROLL:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim.V_UNROLL $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_V_UNROLL 

sim_sub_V_UNROLL:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim_sub.V_UNROLL.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_V_UNROLL 
endif


kill_sim_V_UNROLL:
	@bdw_kill -job sim.V_UNROLL
	@bdw_kill -job sim.V_UNROLL.s


catlog_V_UNROLL: catVLGLog_Filters_UNROLL
debug_V_UNROLL: 
	@$(MAKE) BDW_DEBUG=1 build_V_UNROLL
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=V_UNROLL RUN_DEBUGGER=1
    

view_V_UNROLL:
	@echo "Error: enable_waveform_logging is not enabled"
            


clean_wrap_V_UNROLL:
	@rm -f $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/V_UNROLL $(BDW_WORKLIB)/sims/V_UNROLL/sim_V_UNROLL.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=V_UNROLL

clean_V_UNROLL: clean_hls_V_UNROLL clean_sim_V_UNROLL

clean_sim_V_UNROLL: clean_wrap_V_UNROLL
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_UNROLL.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_UNROLL
	@rm -rf $(BDW_WORKLIB)/jobs/build.V_UNROLL


$(BDW_WORKLIB)/sims/top_V_UNROLL.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -simconfig V_UNROLL -top top



#########################################################
## Start of the rule set for sim_config V_PIPELINE
#########################################################


hls_V_PIPELINE:  
	$(MAKE) -j1 hls_Filters_PIPELINE



cynth_V_PIPELINE:  
	$(MAKE) -j1 hlsc_Filters_PIPELINE

hls_clean_V_PIPELINE: clean_hls_V_PIPELINE

cynth_clean_V_PIPELINE: hls_clean_V_PIPELINE

clean_hls_V_PIPELINE: $(addprefix clean_, hls_Filters_PIPELINE) 

clean_cynth_V_PIPELINE: clean_hls_V_PIPELINE

prebuild_V_PIPELINE: bdw_prebuild_wrappers  
	$(MAKE) -j1 hls_Filters_PIPELINE

ifeq ($(CWBExec_build),1)

dbg_build_V_PIPELINE:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_PIPELINE
	@$(MAKE) BDW_DEBUG=1 build_V_PIPELINE


build_V_PIPELINE build_V_PIPELINE_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 hls_Filters_PIPELINE
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_PIPELINE
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=V_PIPELINE BDW_GENDEPS=1

else
.PHONY: build_V_PIPELINE
.PHONY: dbg_build_V_PIPELINE

dbg_build_V_PIPELINE:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job dbg_build.V_PIPELINE $(MAKE) CWBExec_build=1 dbg_build_V_PIPELINE

build_V_PIPELINE:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job build.V_PIPELINE $(MAKE) CWBExec_build=1 build_V_PIPELINE

build_V_PIPELINE_sub:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job build.V_PIPELINE.s $(MAKE) CWBExec_build=1 build_V_PIPELINE_sub
endif


ifeq ($(CWBExec_sim),1)
sim_V_PIPELINE sim_sub_V_PIPELINE: build_V_PIPELINE_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=V_PIPELINE 

else
.PHONY: sim_V_PIPELINE

sim_V_PIPELINE:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim.V_PIPELINE $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_V_PIPELINE 

sim_sub_V_PIPELINE:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim_sub.V_PIPELINE.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_V_PIPELINE 
endif


kill_sim_V_PIPELINE:
	@bdw_kill -job sim.V_PIPELINE
	@bdw_kill -job sim.V_PIPELINE.s


catlog_V_PIPELINE: catVLGLog_Filters_PIPELINE
debug_V_PIPELINE: 
	@$(MAKE) BDW_DEBUG=1 build_V_PIPELINE
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=V_PIPELINE RUN_DEBUGGER=1
    

view_V_PIPELINE:
	@echo "Error: enable_waveform_logging is not enabled"
            


clean_wrap_V_PIPELINE:
	@rm -f $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/V_PIPELINE $(BDW_WORKLIB)/sims/V_PIPELINE/sim_V_PIPELINE.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=V_PIPELINE

clean_V_PIPELINE: clean_hls_V_PIPELINE clean_sim_V_PIPELINE

clean_sim_V_PIPELINE: clean_wrap_V_PIPELINE
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_PIPELINE.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_PIPELINE
	@rm -rf $(BDW_WORKLIB)/jobs/build.V_PIPELINE


$(BDW_WORKLIB)/sims/top_V_PIPELINE.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -simconfig V_PIPELINE -top top



#########################################################
## Start of the rule set for sim_config V_LATENCY
#########################################################


hls_V_LATENCY:  
	$(MAKE) -j1 hls_Filters_LATENCY



cynth_V_LATENCY:  
	$(MAKE) -j1 hlsc_Filters_LATENCY

hls_clean_V_LATENCY: clean_hls_V_LATENCY

cynth_clean_V_LATENCY: hls_clean_V_LATENCY

clean_hls_V_LATENCY: $(addprefix clean_, hls_Filters_LATENCY) 

clean_cynth_V_LATENCY: clean_hls_V_LATENCY

prebuild_V_LATENCY: bdw_prebuild_wrappers  
	$(MAKE) -j1 hls_Filters_LATENCY

ifeq ($(CWBExec_build),1)

dbg_build_V_LATENCY:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_LATENCY
	@$(MAKE) BDW_DEBUG=1 build_V_LATENCY


build_V_LATENCY build_V_LATENCY_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 hls_Filters_LATENCY
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_LATENCY
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=V_LATENCY BDW_GENDEPS=1

else
.PHONY: build_V_LATENCY
.PHONY: dbg_build_V_LATENCY

dbg_build_V_LATENCY:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job dbg_build.V_LATENCY $(MAKE) CWBExec_build=1 dbg_build_V_LATENCY

build_V_LATENCY:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job build.V_LATENCY $(MAKE) CWBExec_build=1 build_V_LATENCY

build_V_LATENCY_sub:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job build.V_LATENCY.s $(MAKE) CWBExec_build=1 build_V_LATENCY_sub
endif


ifeq ($(CWBExec_sim),1)
sim_V_LATENCY sim_sub_V_LATENCY: build_V_LATENCY_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=V_LATENCY 

else
.PHONY: sim_V_LATENCY

sim_V_LATENCY:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim.V_LATENCY $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_V_LATENCY 

sim_sub_V_LATENCY:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim_sub.V_LATENCY.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_V_LATENCY 
endif


kill_sim_V_LATENCY:
	@bdw_kill -job sim.V_LATENCY
	@bdw_kill -job sim.V_LATENCY.s


catlog_V_LATENCY: catVLGLog_Filters_LATENCY
debug_V_LATENCY: 
	@$(MAKE) BDW_DEBUG=1 build_V_LATENCY
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=V_LATENCY RUN_DEBUGGER=1
    

view_V_LATENCY:
	@echo "Error: enable_waveform_logging is not enabled"
            


clean_wrap_V_LATENCY:
	@rm -f $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/V_LATENCY $(BDW_WORKLIB)/sims/V_LATENCY/sim_V_LATENCY.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=V_LATENCY

clean_V_LATENCY: clean_hls_V_LATENCY clean_sim_V_LATENCY

clean_sim_V_LATENCY: clean_wrap_V_LATENCY
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_LATENCY.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_LATENCY
	@rm -rf $(BDW_WORKLIB)/jobs/build.V_LATENCY


$(BDW_WORKLIB)/sims/top_V_LATENCY.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -simconfig V_LATENCY -top top



#########################################################
## Start of the rule set for sim_config V_UNROLL_PIPE
#########################################################


hls_V_UNROLL_PIPE:  
	$(MAKE) -j1 hls_Filters_UNROLL_PIPE



cynth_V_UNROLL_PIPE:  
	$(MAKE) -j1 hlsc_Filters_UNROLL_PIPE

hls_clean_V_UNROLL_PIPE: clean_hls_V_UNROLL_PIPE

cynth_clean_V_UNROLL_PIPE: hls_clean_V_UNROLL_PIPE

clean_hls_V_UNROLL_PIPE: $(addprefix clean_, hls_Filters_UNROLL_PIPE) 

clean_cynth_V_UNROLL_PIPE: clean_hls_V_UNROLL_PIPE

prebuild_V_UNROLL_PIPE: bdw_prebuild_wrappers  
	$(MAKE) -j1 hls_Filters_UNROLL_PIPE

ifeq ($(CWBExec_build),1)

dbg_build_V_UNROLL_PIPE:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_UNROLL_PIPE
	@$(MAKE) BDW_DEBUG=1 build_V_UNROLL_PIPE


build_V_UNROLL_PIPE build_V_UNROLL_PIPE_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 hls_Filters_UNROLL_PIPE
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_UNROLL_PIPE
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=V_UNROLL_PIPE BDW_GENDEPS=1

else
.PHONY: build_V_UNROLL_PIPE
.PHONY: dbg_build_V_UNROLL_PIPE

dbg_build_V_UNROLL_PIPE:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job dbg_build.V_UNROLL_PIPE $(MAKE) CWBExec_build=1 dbg_build_V_UNROLL_PIPE

build_V_UNROLL_PIPE:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job build.V_UNROLL_PIPE $(MAKE) CWBExec_build=1 build_V_UNROLL_PIPE

build_V_UNROLL_PIPE_sub:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job build.V_UNROLL_PIPE.s $(MAKE) CWBExec_build=1 build_V_UNROLL_PIPE_sub
endif


ifeq ($(CWBExec_sim),1)
sim_V_UNROLL_PIPE sim_sub_V_UNROLL_PIPE: build_V_UNROLL_PIPE_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=V_UNROLL_PIPE 

else
.PHONY: sim_V_UNROLL_PIPE

sim_V_UNROLL_PIPE:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim.V_UNROLL_PIPE $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_V_UNROLL_PIPE 

sim_sub_V_UNROLL_PIPE:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim_sub.V_UNROLL_PIPE.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_V_UNROLL_PIPE 
endif


kill_sim_V_UNROLL_PIPE:
	@bdw_kill -job sim.V_UNROLL_PIPE
	@bdw_kill -job sim.V_UNROLL_PIPE.s


catlog_V_UNROLL_PIPE: catVLGLog_Filters_UNROLL_PIPE
debug_V_UNROLL_PIPE: 
	@$(MAKE) BDW_DEBUG=1 build_V_UNROLL_PIPE
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=V_UNROLL_PIPE RUN_DEBUGGER=1
    

view_V_UNROLL_PIPE:
	@echo "Error: enable_waveform_logging is not enabled"
            


clean_wrap_V_UNROLL_PIPE:
	@rm -f $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/V_UNROLL_PIPE $(BDW_WORKLIB)/sims/V_UNROLL_PIPE/sim_V_UNROLL_PIPE.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=V_UNROLL_PIPE

clean_V_UNROLL_PIPE: clean_hls_V_UNROLL_PIPE clean_sim_V_UNROLL_PIPE

clean_sim_V_UNROLL_PIPE: clean_wrap_V_UNROLL_PIPE
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_UNROLL_PIPE.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_UNROLL_PIPE
	@rm -rf $(BDW_WORKLIB)/jobs/build.V_UNROLL_PIPE


$(BDW_WORKLIB)/sims/top_V_UNROLL_PIPE.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -simconfig V_UNROLL_PIPE -top top



#########################################################
## Start of the rule set for sim_config V_LATENCY_PIPE
#########################################################


hls_V_LATENCY_PIPE:  
	$(MAKE) -j1 hls_Filters_LATENCY_PIPE



cynth_V_LATENCY_PIPE:  
	$(MAKE) -j1 hlsc_Filters_LATENCY_PIPE

hls_clean_V_LATENCY_PIPE: clean_hls_V_LATENCY_PIPE

cynth_clean_V_LATENCY_PIPE: hls_clean_V_LATENCY_PIPE

clean_hls_V_LATENCY_PIPE: $(addprefix clean_, hls_Filters_LATENCY_PIPE) 

clean_cynth_V_LATENCY_PIPE: clean_hls_V_LATENCY_PIPE

prebuild_V_LATENCY_PIPE: bdw_prebuild_wrappers  
	$(MAKE) -j1 hls_Filters_LATENCY_PIPE

ifeq ($(CWBExec_build),1)

dbg_build_V_LATENCY_PIPE:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_LATENCY_PIPE
	@$(MAKE) BDW_DEBUG=1 build_V_LATENCY_PIPE


build_V_LATENCY_PIPE build_V_LATENCY_PIPE_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 hls_Filters_LATENCY_PIPE
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_LATENCY_PIPE
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=V_LATENCY_PIPE BDW_GENDEPS=1

else
.PHONY: build_V_LATENCY_PIPE
.PHONY: dbg_build_V_LATENCY_PIPE

dbg_build_V_LATENCY_PIPE:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job dbg_build.V_LATENCY_PIPE $(MAKE) CWBExec_build=1 dbg_build_V_LATENCY_PIPE

build_V_LATENCY_PIPE:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job build.V_LATENCY_PIPE $(MAKE) CWBExec_build=1 build_V_LATENCY_PIPE

build_V_LATENCY_PIPE_sub:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job build.V_LATENCY_PIPE.s $(MAKE) CWBExec_build=1 build_V_LATENCY_PIPE_sub
endif


ifeq ($(CWBExec_sim),1)
sim_V_LATENCY_PIPE sim_sub_V_LATENCY_PIPE: build_V_LATENCY_PIPE_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=V_LATENCY_PIPE 

else
.PHONY: sim_V_LATENCY_PIPE

sim_V_LATENCY_PIPE:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim.V_LATENCY_PIPE $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_V_LATENCY_PIPE 

sim_sub_V_LATENCY_PIPE:
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim_sub.V_LATENCY_PIPE.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_V_LATENCY_PIPE 
endif


kill_sim_V_LATENCY_PIPE:
	@bdw_kill -job sim.V_LATENCY_PIPE
	@bdw_kill -job sim.V_LATENCY_PIPE.s


catlog_V_LATENCY_PIPE: catVLGLog_Filters_LATENCY_PIPE
debug_V_LATENCY_PIPE: 
	@$(MAKE) BDW_DEBUG=1 build_V_LATENCY_PIPE
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=V_LATENCY_PIPE RUN_DEBUGGER=1
    

view_V_LATENCY_PIPE:
	@echo "Error: enable_waveform_logging is not enabled"
            


clean_wrap_V_LATENCY_PIPE:
	@rm -f $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/V_LATENCY_PIPE $(BDW_WORKLIB)/sims/V_LATENCY_PIPE/sim_V_LATENCY_PIPE.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=V_LATENCY_PIPE

clean_V_LATENCY_PIPE: clean_hls_V_LATENCY_PIPE clean_sim_V_LATENCY_PIPE

clean_sim_V_LATENCY_PIPE: clean_wrap_V_LATENCY_PIPE
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_LATENCY_PIPE.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_LATENCY_PIPE
	@rm -rf $(BDW_WORKLIB)/jobs/build.V_LATENCY_PIPE


$(BDW_WORKLIB)/sims/top_V_LATENCY_PIPE.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -simconfig V_LATENCY_PIPE -top top


#############################################################################
# libesc building rules
#############################################################################

ifeq ($(BDW_DEBUG),1)
libesc_WORKDIR = $(BDW_WORKLIB)/libesc/debug
else
libesc_WORKDIR = $(BDW_WORKLIB)/libesc
endif

BDW_ESC_SOURCES = libesc.o esc_elab.o esc_cleanup.o
BDW_ESC_OBJS = $(addprefix $(libesc_WORKDIR)/, $(BDW_ESC_SOURCES))

$(libesc_WORKDIR)/libesc.a : $(BDW_ESC_OBJS)
	$(BDW_AR) $(libesc_WORKDIR)/libesc.a $(BDW_ESC_OBJS)

${libesc_WORKDIR}/%.o   :   ${STRATUS_HOME}/share/stratus/source/%.cc 
	@if [ ! -d ${libesc_WORKDIR} ]; then mkdir -p ${libesc_WORKDIR}; fi
ifeq ($(BDW_NCSC),1)
	${BDW_CC} "-TP ${BDW_CCFLAGS} ${BDW_COUT}$@ " $<
else
	${BDW_CC} -TP ${BDW_CCFLAGS} ${BDW_COUT}$@ $<
endif



########################################################################
# Rules to prep all libraries
#######################################################################
prep_c_all: $(BDW_C_LIBPREP)

prep_vlog_all: $(BDW_VLOG_LIBPREP)


##############################################################
## Rule for building all Cynth libraries external to the project
##############################################################

build_all_cynthLibs: $(BDW_BOTH_LIBPREP_EXTERNAL)

list_cynthLibs:


##############################################################
## START OF HLS MODULE RULES
##############################################################



##############################################################
## HLS Module "Filters"
##############################################################


#
# Dependency Generation rule for BEH module
#
$(BDW_OBJDIR)/Filters.d :  ../Filters.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for $< "
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)  ../Filters.cpp \
	| sed 's|Filters\.o[ :]*|$(BDW_OBJDIR)/Filters.o $(BDW_OBJDIR)/Filters.d : |' $(BDW_DEP_FILTER)  > $@

$(BDW_WORKLIB)/wrappers/Filters_trace.h : $(BDW_WORKLIB)/wrappers/Filters_trace.h.updated

$(BDW_WORKLIB)/wrappers/Filters_trace.h.updated :  ../Filters.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module Filters  
	@touch $(BDW_WORKLIB)/wrappers/Filters_trace.h.updated



$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/Filters.o:  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/Filters.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Filters.o:  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/Filters.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

.INTERMEDIATE : Filters_wrap.h

Filters_wrap.h : $(BDW_WORKLIB)/wrappers/Filters_wrap.h

$(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_cosim.v   : $(BDW_WRAPDIR)/Filters.updated

$(BDW_WRAPDIR)/Filters.updated :  ../Filters.cpp 
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -module Filters "-I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(BDW_CCOPTIONS) $(BDW_EXTRA_CCFLAGS)"
	@touch $(BDW_WRAPDIR)/Filters.updated
	$(STRATUS_HOME)/bin/bdw_tracegen -module Filters  
	@touch $(BDW_WORKLIB)/wrappers/Filters_trace.h.updated
$(BDW_WORKLIB)/wrappers/Filters_wrap.d :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)   ../Filters.cpp \
		| sed 's|Filters\.o[ :]*|$(BDW_WRAPDIR)/Filters.updated $(BDW_WORKLIB)/wrappers/Filters_wrap.d :  |' $(BDW_DEP_FILTER) > $(BDW_WORKLIB)/wrappers/Filters_wrap.d 




##############################################################
## HLS Module "Filters" - cynthConfigs
##############################################################


#
# HLS config BASIC
#

#
#	stratus_hls rule
#
LIB_DIRS_Filters_BASIC = 
LIB_INCLUDES_Filters_BASIC = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filters_BASIC))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_Filters_BASIC = 
LIB_NAMES_FOR_VLOG_Filters_BASIC = 
PREFIXED_LIB_NAMES_Filters_BASIC = 
EXTRACT_LIB_DASHI_Filters_BASIC = $(shell echo "puts stdout [extractHoistLibDashIs /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters BASIC]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_Filters_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/BASIC/c_parts -DBASIC=1 -DBDW_RTL_Filters_BASIC=1  $(LIB_INCLUDES_Filters_BASIC)
CCFLAGS_COSIM_Filters_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/BASIC/c_parts -DBASIC=1 -DBDW_RTL_Filters_BASIC=1  $(LIB_INCLUDES_Filters_BASIC)
CCFLAGS_BEH_Filters_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/BASIC/c_parts -DBASIC=1  $(LIB_INCLUDES_Filters_BASIC)
CCFLAGS_Filters_BASIC += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_Filters_BASIC += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_Filters_BASIC += ${BDW_CCFLAGS_TAIL}

hls_Filters_BASIC : hlsc_Filters_BASIC

cynth_Filters_BASIC : hlsc_Filters_BASIC 

elab_Filters_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/Filters/BASIC/stratus_hls.bdr

optim_Filters_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/Filters/BASIC/stratus_hls.bdr

sched_Filters_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/Filters/BASIC/stratus_hls.bdr

.PHONY: hlsc_Filters_BASIC hls_Filters_BASIC

hlsc_Filters_BASIC : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/Filters/BASIC/Filters_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=Filters BDW_HLS_CONFIG=BASIC
else
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hls.Filters.BASIC $(MAKE) CWBExec_hls=1 hlsc_Filters_BASIC
endif

clean_cynth_Filters_BASIC: clean_hls_Filters_BASIC

clean_Filters_BASIC: clean_hls_Filters_BASIC

clean_hls_Filters_BASIC:
	@rm -rf $(BDW_WORKLIB)/modules/Filters/BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filters.BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filters.BASIC.s

kill_hls_Filters_BASIC:
	@bdw_kill -job hls.Filters.BASIC
	@bdw_kill -job hls.Filters.BASIC.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),BASIC)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/Filters/BASIC/Filters.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_Filters_BASIC :
	bdw_htmlgen -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -module Filters -cynthconfig BASIC





ifeq ($(CWBExec_hlsc),1)
$(BDW_WORKLIB)/modules/Filters/BASIC/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/BASIC/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/BASIC/stratus_hls.bdr :  ../Filters.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/Filters/BASIC ]; then mkdir -p $(BDW_WORKLIB)/modules/Filters/BASIC; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
	BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/Filters/BASIC/Filters_rtl.v BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/Filters/BASIC/Filters_rtl.cpp BDW_MODULE=Filters BDW_CYNTH_CONFIG=BASIC BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filters/BASIC BDW_HLS_CONFIG=BASIC BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filters/BASIC \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_Filters_BASIC) \
		-d $(BDW_WORKLIB)/modules/Filters/BASIC -o Filters_rtl.cpp \
		--hls_module=Filters --hls_config=BASIC --project=/users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_Filters_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_Filters_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_Filters_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_Filters_BASIC) \
		 ../Filters.cpp
	
	
	

else

$(BDW_WORKLIB)/modules/Filters/BASIC/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/BASIC/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/BASIC/stratus_hls.bdr :  ../Filters.cpp  $(BDW_LIB_DEPS)
	bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hls.Filters.BASIC.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_WORKLIB)/modules/Filters/BASIC/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/BASIC/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/BASIC/stratus_hls.bdr

endif

	
	
$(BDW_WORKLIB)/modules/Filters/BASIC/Filters_trace.h : $(BDW_WORKLIB)/modules/Filters/BASIC/Filters_trace.h.updated

$(BDW_WORKLIB)/modules/Filters/BASIC/Filters_trace.h.updated : $(BDW_WORKLIB)/modules/Filters/BASIC/Filters_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module Filters -cynthconfig BASIC  
	@touch $(BDW_WORKLIB)/modules/Filters/BASIC/Filters_trace.h.updated

catHLLog_Filters_BASIC:
	cat $(BDW_WORKLIB)/modules/Filters/BASIC/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_Filters_BASIC : hls_Filters_BASIC 


.PHONY: hls_Filters_BASIC

hls_Filters_BASIC hlsv_Filters_BASIC: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_Filters_BASIC)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_Filters_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hlsv.Filters.BASIC $(MAKE) CWBExec_hlsv=1 hlsv_Filters_BASIC
endif

catVLGLog_Filters_BASIC : catHLLog_Filters_BASIC
	cat $(BDW_WORKLIB)/modules/Filters/BASIC/stratus_vlg.log

#
#	view rule
#

view_Filters_BASIC:
	@echo "ERROR: Schematic viewing target 'view_Filters_BASIC' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/Filters/BASIC/Filters_rtl.o : $(BDW_WORKLIB)/modules/Filters/BASIC/Filters_rtl.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/modules/Filters/BASIC/Filters_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/BASIC -I./ $(CCFLAGS_Filters_BASIC) $(EXTRACT_LIB_DASHI_Filters_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filters/BASIC/Filters_rtl.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

$(BDW_WORKLIB)/modules/Filters/BASIC/debug/Filters_rtl.o : $(BDW_WORKLIB)/modules/Filters/BASIC/Filters_rtl.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/modules/Filters/BASIC/Filters_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/BASIC -I./ $(CCFLAGS_Filters_BASIC) $(EXTRACT_LIB_DASHI_Filters_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filters/BASIC/debug/Filters_rtl.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/Filters/BASIC/Filters_beh.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/BASIC -I./ $(CCFLAGS_BEH_Filters_BASIC) -o $(BDW_WORKLIB)/modules/Filters/BASIC/Filters_beh.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

$(BDW_WORKLIB)/modules/Filters/BASIC/debug/Filters_beh.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/BASIC -I./ $(CCFLAGS_BEH_Filters_BASIC) -o $(BDW_WORKLIB)/modules/Filters/BASIC/debug/Filters_beh.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/Filters/BASIC/Filters.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/BASIC -I./ $(CCFLAGS_COSIM_Filters_BASIC) -o $(BDW_WORKLIB)/modules/Filters/BASIC/Filters.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filters/BASIC/Filters_hoist.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/BASIC -I./ $(CCFLAGS_Filters_BASIC) $(EXTRACT_LIB_DASHI_Filters_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filters/BASIC/Filters_hoist.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filters/BASIC/debug/Filters.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/BASIC -I./ $(CCFLAGS_COSIM_Filters_BASIC) -o $(BDW_WORKLIB)/modules/Filters/BASIC/debug/Filters.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp


$(BDW_WORKLIB)/modules/Filters/BASIC/debug/Filters_hoist.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/BASIC -I./ $(CCFLAGS_Filters_BASIC) $(EXTRACT_LIB_DASHI_Filters_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filters/BASIC/debug/Filters_hoist.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/Filters/BASIC/Filters.d :  ../Filters.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config BASIC of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_Filters_BASIC)  ../Filters.cpp \
	| sed 's|Filters\.o[ :]*|$(BDW_WORKLIB)/modules/Filters/BASIC/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/BASIC/Filters_beh.o $(BDW_WORKLIB)/modules/Filters/BASIC/debug/Filters_beh.o $(BDW_WORKLIB)/modules/Filters/BASIC/Filters.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/Filters/BASIC"
##############################################################

Filters_BASIC_SRCDIR = $(BDW_WORKLIB)/modules/Filters/BASIC
Filters_BASIC_BEH_SRCDIR = $(BDW_WORKLIB)/libs/Filters_BASIC
Filters_BASIC_LIBNAME = Filters_BASIC
Filters_BASIC_WORKLIB = $(BDW_WORKLIB)/modules/Filters/BASIC
Filters_BASIC_C_PARTS_A = $(Filters_BASIC_WORKLIB)/objs/libFilters_BASIC.a

prep_c_Filters_BASIC : $(Filters_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_BASIC_WORKLIB) prep_c

prep_vlog_Filters_BASIC : $(Filters_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_BASIC_WORKLIB) prep_vlog

prep_Filters_BASIC : $(Filters_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_BASIC_WORKLIB) prep

$(Filters_BASIC_WORKLIB)/Makefile : $(Filters_BASIC_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(Filters_BASIC_WORKLIB) ]; then mkdir -p $(Filters_BASIC_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -scsim builtin -lib $(Filters_BASIC_SRCDIR) -o $(Filters_BASIC_WORKLIB)/Makefile -module Filters -cynthconfig BASIC   

$(Filters_BASIC_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(Filters_BASIC_WORKLIB) ]; then mkdir -p $(Filters_BASIC_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(Filters_BASIC_WORKLIB)/Filters_BASIC.d :
	@if [ ! -d $(Filters_BASIC_WORKLIB) ]; then mkdir -p $(Filters_BASIC_WORKLIB); fi
	@touch $(Filters_BASIC_WORKLIB)/Filters_BASIC.d



#
# HLS config DPA
#

#
#	stratus_hls rule
#
LIB_DIRS_Filters_DPA = 
LIB_INCLUDES_Filters_DPA = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filters_DPA))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_Filters_DPA = 
LIB_NAMES_FOR_VLOG_Filters_DPA = 
PREFIXED_LIB_NAMES_Filters_DPA = 
EXTRACT_LIB_DASHI_Filters_DPA = $(shell echo "puts stdout [extractHoistLibDashIs /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters DPA]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_Filters_DPA = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/DPA/c_parts -DDPA=1 -DBDW_RTL_Filters_DPA=1  $(LIB_INCLUDES_Filters_DPA)
CCFLAGS_COSIM_Filters_DPA = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/DPA/c_parts -DDPA=1 -DBDW_RTL_Filters_DPA=1  $(LIB_INCLUDES_Filters_DPA)
CCFLAGS_BEH_Filters_DPA = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/DPA/c_parts -DDPA=1  $(LIB_INCLUDES_Filters_DPA)
CCFLAGS_Filters_DPA += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_Filters_DPA += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_Filters_DPA += ${BDW_CCFLAGS_TAIL}

hls_Filters_DPA : hlsc_Filters_DPA

cynth_Filters_DPA : hlsc_Filters_DPA 

elab_Filters_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/Filters/DPA/stratus_hls.bdr

optim_Filters_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/Filters/DPA/stratus_hls.bdr

sched_Filters_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/Filters/DPA/stratus_hls.bdr

.PHONY: hlsc_Filters_DPA hls_Filters_DPA

hlsc_Filters_DPA : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/Filters/DPA/Filters_rtl.cpp BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=Filters BDW_HLS_CONFIG=DPA
else
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hls.Filters.DPA $(MAKE) CWBExec_hls=1 hlsc_Filters_DPA
endif

clean_cynth_Filters_DPA: clean_hls_Filters_DPA

clean_Filters_DPA: clean_hls_Filters_DPA

clean_hls_Filters_DPA:
	@rm -rf $(BDW_WORKLIB)/modules/Filters/DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filters.DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filters.DPA.s

kill_hls_Filters_DPA:
	@bdw_kill -job hls.Filters.DPA
	@bdw_kill -job hls.Filters.DPA.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),DPA)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/Filters/DPA/Filters.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_Filters_DPA :
	bdw_htmlgen -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -module Filters -cynthconfig DPA





ifeq ($(CWBExec_hlsc),1)
$(BDW_WORKLIB)/modules/Filters/DPA/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/DPA/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/DPA/stratus_hls.bdr :  ../Filters.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/Filters/DPA ]; then mkdir -p $(BDW_WORKLIB)/modules/Filters/DPA; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=DPA BDW_CYNTH_CONFIG=DPA \
	BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/Filters/DPA/Filters_rtl.v BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/Filters/DPA/Filters_rtl.cpp BDW_MODULE=Filters BDW_CYNTH_CONFIG=DPA BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filters/DPA BDW_HLS_CONFIG=DPA BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filters/DPA \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_Filters_DPA) \
		-d $(BDW_WORKLIB)/modules/Filters/DPA -o Filters_rtl.cpp \
		--hls_module=Filters --hls_config=DPA --project=/users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_Filters_DPA))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_Filters_DPA))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_Filters_DPA))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_Filters_DPA) \
		 ../Filters.cpp
	
	
	

else

$(BDW_WORKLIB)/modules/Filters/DPA/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/DPA/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/DPA/stratus_hls.bdr :  ../Filters.cpp  $(BDW_LIB_DEPS)
	bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hls.Filters.DPA.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_WORKLIB)/modules/Filters/DPA/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/DPA/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/DPA/stratus_hls.bdr

endif

	
	
$(BDW_WORKLIB)/modules/Filters/DPA/Filters_trace.h : $(BDW_WORKLIB)/modules/Filters/DPA/Filters_trace.h.updated

$(BDW_WORKLIB)/modules/Filters/DPA/Filters_trace.h.updated : $(BDW_WORKLIB)/modules/Filters/DPA/Filters_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module Filters -cynthconfig DPA  
	@touch $(BDW_WORKLIB)/modules/Filters/DPA/Filters_trace.h.updated

catHLLog_Filters_DPA:
	cat $(BDW_WORKLIB)/modules/Filters/DPA/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_Filters_DPA : hls_Filters_DPA 


.PHONY: hls_Filters_DPA

hls_Filters_DPA hlsv_Filters_DPA: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_Filters_DPA)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_Filters_DPA BDW_DEP_CYNTH_CONFIG=DPA
else
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hlsv.Filters.DPA $(MAKE) CWBExec_hlsv=1 hlsv_Filters_DPA
endif

catVLGLog_Filters_DPA : catHLLog_Filters_DPA
	cat $(BDW_WORKLIB)/modules/Filters/DPA/stratus_vlg.log

#
#	view rule
#

view_Filters_DPA:
	@echo "ERROR: Schematic viewing target 'view_Filters_DPA' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/Filters/DPA/Filters_rtl.o : $(BDW_WORKLIB)/modules/Filters/DPA/Filters_rtl.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/modules/Filters/DPA/Filters_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/DPA -I./ $(CCFLAGS_Filters_DPA) $(EXTRACT_LIB_DASHI_Filters_DPA) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filters/DPA/Filters_rtl.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

$(BDW_WORKLIB)/modules/Filters/DPA/debug/Filters_rtl.o : $(BDW_WORKLIB)/modules/Filters/DPA/Filters_rtl.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/modules/Filters/DPA/Filters_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/DPA -I./ $(CCFLAGS_Filters_DPA) $(EXTRACT_LIB_DASHI_Filters_DPA) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filters/DPA/debug/Filters_rtl.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/Filters/DPA/Filters_beh.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/DPA -I./ $(CCFLAGS_BEH_Filters_DPA) -o $(BDW_WORKLIB)/modules/Filters/DPA/Filters_beh.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

$(BDW_WORKLIB)/modules/Filters/DPA/debug/Filters_beh.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/DPA -I./ $(CCFLAGS_BEH_Filters_DPA) -o $(BDW_WORKLIB)/modules/Filters/DPA/debug/Filters_beh.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/Filters/DPA/Filters.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/DPA -I./ $(CCFLAGS_COSIM_Filters_DPA) -o $(BDW_WORKLIB)/modules/Filters/DPA/Filters.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filters/DPA/Filters_hoist.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/DPA -I./ $(CCFLAGS_Filters_DPA) $(EXTRACT_LIB_DASHI_Filters_DPA) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filters/DPA/Filters_hoist.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filters/DPA/debug/Filters.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/DPA -I./ $(CCFLAGS_COSIM_Filters_DPA) -o $(BDW_WORKLIB)/modules/Filters/DPA/debug/Filters.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp


$(BDW_WORKLIB)/modules/Filters/DPA/debug/Filters_hoist.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/DPA -I./ $(CCFLAGS_Filters_DPA) $(EXTRACT_LIB_DASHI_Filters_DPA) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filters/DPA/debug/Filters_hoist.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/Filters/DPA/Filters.d :  ../Filters.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config DPA of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_Filters_DPA)  ../Filters.cpp \
	| sed 's|Filters\.o[ :]*|$(BDW_WORKLIB)/modules/Filters/DPA/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/DPA/Filters_beh.o $(BDW_WORKLIB)/modules/Filters/DPA/debug/Filters_beh.o $(BDW_WORKLIB)/modules/Filters/DPA/Filters.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/Filters/DPA"
##############################################################

Filters_DPA_SRCDIR = $(BDW_WORKLIB)/modules/Filters/DPA
Filters_DPA_BEH_SRCDIR = $(BDW_WORKLIB)/libs/Filters_DPA
Filters_DPA_LIBNAME = Filters_DPA
Filters_DPA_WORKLIB = $(BDW_WORKLIB)/modules/Filters/DPA
Filters_DPA_C_PARTS_A = $(Filters_DPA_WORKLIB)/objs/libFilters_DPA.a

prep_c_Filters_DPA : $(Filters_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_DPA_WORKLIB) prep_c

prep_vlog_Filters_DPA : $(Filters_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_DPA_WORKLIB) prep_vlog

prep_Filters_DPA : $(Filters_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_DPA_WORKLIB) prep

$(Filters_DPA_WORKLIB)/Makefile : $(Filters_DPA_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(Filters_DPA_WORKLIB) ]; then mkdir -p $(Filters_DPA_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -scsim builtin -lib $(Filters_DPA_SRCDIR) -o $(Filters_DPA_WORKLIB)/Makefile -module Filters -cynthconfig DPA   

$(Filters_DPA_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(Filters_DPA_WORKLIB) ]; then mkdir -p $(Filters_DPA_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(Filters_DPA_WORKLIB)/Filters_DPA.d :
	@if [ ! -d $(Filters_DPA_WORKLIB) ]; then mkdir -p $(Filters_DPA_WORKLIB); fi
	@touch $(Filters_DPA_WORKLIB)/Filters_DPA.d



#
# HLS config UNROLL
#

#
#	stratus_hls rule
#
LIB_DIRS_Filters_UNROLL = 
LIB_INCLUDES_Filters_UNROLL = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filters_UNROLL))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_Filters_UNROLL = 
LIB_NAMES_FOR_VLOG_Filters_UNROLL = 
PREFIXED_LIB_NAMES_Filters_UNROLL = 
EXTRACT_LIB_DASHI_Filters_UNROLL = $(shell echo "puts stdout [extractHoistLibDashIs /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters UNROLL]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_Filters_UNROLL = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/UNROLL/c_parts -DUNROLL=1 -DBDW_RTL_Filters_UNROLL=1  $(LIB_INCLUDES_Filters_UNROLL)
CCFLAGS_COSIM_Filters_UNROLL = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/UNROLL/c_parts -DUNROLL=1 -DBDW_RTL_Filters_UNROLL=1  $(LIB_INCLUDES_Filters_UNROLL)
CCFLAGS_BEH_Filters_UNROLL = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/UNROLL/c_parts -DUNROLL=1  $(LIB_INCLUDES_Filters_UNROLL)
CCFLAGS_Filters_UNROLL += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_Filters_UNROLL += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_Filters_UNROLL += ${BDW_CCFLAGS_TAIL}

hls_Filters_UNROLL : hlsc_Filters_UNROLL

cynth_Filters_UNROLL : hlsc_Filters_UNROLL 

elab_Filters_UNROLL : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/Filters/UNROLL/stratus_hls.bdr

optim_Filters_UNROLL : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/Filters/UNROLL/stratus_hls.bdr

sched_Filters_UNROLL : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/Filters/UNROLL/stratus_hls.bdr

.PHONY: hlsc_Filters_UNROLL hls_Filters_UNROLL

hlsc_Filters_UNROLL : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_rtl.cpp BDW_DEP_CYNTH_CONFIG=UNROLL BDW_MODULE=Filters BDW_HLS_CONFIG=UNROLL
else
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hls.Filters.UNROLL $(MAKE) CWBExec_hls=1 hlsc_Filters_UNROLL
endif

clean_cynth_Filters_UNROLL: clean_hls_Filters_UNROLL

clean_Filters_UNROLL: clean_hls_Filters_UNROLL

clean_hls_Filters_UNROLL:
	@rm -rf $(BDW_WORKLIB)/modules/Filters/UNROLL
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filters.UNROLL
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filters.UNROLL.s

kill_hls_Filters_UNROLL:
	@bdw_kill -job hls.Filters.UNROLL
	@bdw_kill -job hls.Filters.UNROLL.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),UNROLL)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_Filters_UNROLL :
	bdw_htmlgen -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -module Filters -cynthconfig UNROLL





ifeq ($(CWBExec_hlsc),1)
$(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/UNROLL/stratus_hls.bdr :  ../Filters.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/Filters/UNROLL ]; then mkdir -p $(BDW_WORKLIB)/modules/Filters/UNROLL; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=UNROLL BDW_CYNTH_CONFIG=UNROLL \
	BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_rtl.v BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_rtl.cpp BDW_MODULE=Filters BDW_CYNTH_CONFIG=UNROLL BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filters/UNROLL BDW_HLS_CONFIG=UNROLL BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filters/UNROLL \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_Filters_UNROLL) \
		-d $(BDW_WORKLIB)/modules/Filters/UNROLL -o Filters_rtl.cpp \
		--hls_module=Filters --hls_config=UNROLL --project=/users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_Filters_UNROLL))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_Filters_UNROLL))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_Filters_UNROLL))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_Filters_UNROLL) \
		 ../Filters.cpp
	
	
	

else

$(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/UNROLL/stratus_hls.bdr :  ../Filters.cpp  $(BDW_LIB_DEPS)
	bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hls.Filters.UNROLL.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/UNROLL/stratus_hls.bdr

endif

	
	
$(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_trace.h : $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_trace.h.updated

$(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_trace.h.updated : $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module Filters -cynthconfig UNROLL  
	@touch $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_trace.h.updated

catHLLog_Filters_UNROLL:
	cat $(BDW_WORKLIB)/modules/Filters/UNROLL/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_Filters_UNROLL : hls_Filters_UNROLL 


.PHONY: hls_Filters_UNROLL

hls_Filters_UNROLL hlsv_Filters_UNROLL: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_Filters_UNROLL)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_Filters_UNROLL BDW_DEP_CYNTH_CONFIG=UNROLL
else
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hlsv.Filters.UNROLL $(MAKE) CWBExec_hlsv=1 hlsv_Filters_UNROLL
endif

catVLGLog_Filters_UNROLL : catHLLog_Filters_UNROLL
	cat $(BDW_WORKLIB)/modules/Filters/UNROLL/stratus_vlg.log

#
#	view rule
#

view_Filters_UNROLL:
	@echo "ERROR: Schematic viewing target 'view_Filters_UNROLL' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_rtl.o : $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_rtl.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/UNROLL -I./ $(CCFLAGS_Filters_UNROLL) $(EXTRACT_LIB_DASHI_Filters_UNROLL) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_rtl.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

$(BDW_WORKLIB)/modules/Filters/UNROLL/debug/Filters_rtl.o : $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_rtl.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/UNROLL -I./ $(CCFLAGS_Filters_UNROLL) $(EXTRACT_LIB_DASHI_Filters_UNROLL) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filters/UNROLL/debug/Filters_rtl.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_beh.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/UNROLL -I./ $(CCFLAGS_BEH_Filters_UNROLL) -o $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_beh.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

$(BDW_WORKLIB)/modules/Filters/UNROLL/debug/Filters_beh.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/UNROLL -I./ $(CCFLAGS_BEH_Filters_UNROLL) -o $(BDW_WORKLIB)/modules/Filters/UNROLL/debug/Filters_beh.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/Filters/UNROLL/Filters.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/UNROLL -I./ $(CCFLAGS_COSIM_Filters_UNROLL) -o $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_hoist.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/UNROLL -I./ $(CCFLAGS_Filters_UNROLL) $(EXTRACT_LIB_DASHI_Filters_UNROLL) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_hoist.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filters/UNROLL/debug/Filters.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/UNROLL -I./ $(CCFLAGS_COSIM_Filters_UNROLL) -o $(BDW_WORKLIB)/modules/Filters/UNROLL/debug/Filters.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp


$(BDW_WORKLIB)/modules/Filters/UNROLL/debug/Filters_hoist.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/UNROLL -I./ $(CCFLAGS_Filters_UNROLL) $(EXTRACT_LIB_DASHI_Filters_UNROLL) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filters/UNROLL/debug/Filters_hoist.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/Filters/UNROLL/Filters.d :  ../Filters.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config UNROLL of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_Filters_UNROLL)  ../Filters.cpp \
	| sed 's|Filters\.o[ :]*|$(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_beh.o $(BDW_WORKLIB)/modules/Filters/UNROLL/debug/Filters_beh.o $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/Filters/UNROLL"
##############################################################

Filters_UNROLL_SRCDIR = $(BDW_WORKLIB)/modules/Filters/UNROLL
Filters_UNROLL_BEH_SRCDIR = $(BDW_WORKLIB)/libs/Filters_UNROLL
Filters_UNROLL_LIBNAME = Filters_UNROLL
Filters_UNROLL_WORKLIB = $(BDW_WORKLIB)/modules/Filters/UNROLL
Filters_UNROLL_C_PARTS_A = $(Filters_UNROLL_WORKLIB)/objs/libFilters_UNROLL.a

prep_c_Filters_UNROLL : $(Filters_UNROLL_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_UNROLL_WORKLIB) prep_c

prep_vlog_Filters_UNROLL : $(Filters_UNROLL_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_UNROLL_WORKLIB) prep_vlog

prep_Filters_UNROLL : $(Filters_UNROLL_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_UNROLL_WORKLIB) prep

$(Filters_UNROLL_WORKLIB)/Makefile : $(Filters_UNROLL_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(Filters_UNROLL_WORKLIB) ]; then mkdir -p $(Filters_UNROLL_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -scsim builtin -lib $(Filters_UNROLL_SRCDIR) -o $(Filters_UNROLL_WORKLIB)/Makefile -module Filters -cynthconfig UNROLL   

$(Filters_UNROLL_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(Filters_UNROLL_WORKLIB) ]; then mkdir -p $(Filters_UNROLL_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(Filters_UNROLL_WORKLIB)/Filters_UNROLL.d :
	@if [ ! -d $(Filters_UNROLL_WORKLIB) ]; then mkdir -p $(Filters_UNROLL_WORKLIB); fi
	@touch $(Filters_UNROLL_WORKLIB)/Filters_UNROLL.d



#
# HLS config PIPELINE
#

#
#	stratus_hls rule
#
LIB_DIRS_Filters_PIPELINE = 
LIB_INCLUDES_Filters_PIPELINE = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filters_PIPELINE))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_Filters_PIPELINE = 
LIB_NAMES_FOR_VLOG_Filters_PIPELINE = 
PREFIXED_LIB_NAMES_Filters_PIPELINE = 
EXTRACT_LIB_DASHI_Filters_PIPELINE = $(shell echo "puts stdout [extractHoistLibDashIs /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters PIPELINE]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_Filters_PIPELINE = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/PIPELINE/c_parts -DPIPELINE=1 -DBDW_RTL_Filters_PIPELINE=1  $(LIB_INCLUDES_Filters_PIPELINE)
CCFLAGS_COSIM_Filters_PIPELINE = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/PIPELINE/c_parts -DPIPELINE=1 -DBDW_RTL_Filters_PIPELINE=1  $(LIB_INCLUDES_Filters_PIPELINE)
CCFLAGS_BEH_Filters_PIPELINE = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/PIPELINE/c_parts -DPIPELINE=1  $(LIB_INCLUDES_Filters_PIPELINE)
CCFLAGS_Filters_PIPELINE += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_Filters_PIPELINE += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_Filters_PIPELINE += ${BDW_CCFLAGS_TAIL}

hls_Filters_PIPELINE : hlsc_Filters_PIPELINE

cynth_Filters_PIPELINE : hlsc_Filters_PIPELINE 

elab_Filters_PIPELINE : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/Filters/PIPELINE/stratus_hls.bdr

optim_Filters_PIPELINE : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/Filters/PIPELINE/stratus_hls.bdr

sched_Filters_PIPELINE : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/Filters/PIPELINE/stratus_hls.bdr

.PHONY: hlsc_Filters_PIPELINE hls_Filters_PIPELINE

hlsc_Filters_PIPELINE : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_rtl.cpp BDW_DEP_CYNTH_CONFIG=PIPELINE BDW_MODULE=Filters BDW_HLS_CONFIG=PIPELINE
else
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hls.Filters.PIPELINE $(MAKE) CWBExec_hls=1 hlsc_Filters_PIPELINE
endif

clean_cynth_Filters_PIPELINE: clean_hls_Filters_PIPELINE

clean_Filters_PIPELINE: clean_hls_Filters_PIPELINE

clean_hls_Filters_PIPELINE:
	@rm -rf $(BDW_WORKLIB)/modules/Filters/PIPELINE
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filters.PIPELINE
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filters.PIPELINE.s

kill_hls_Filters_PIPELINE:
	@bdw_kill -job hls.Filters.PIPELINE
	@bdw_kill -job hls.Filters.PIPELINE.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),PIPELINE)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_Filters_PIPELINE :
	bdw_htmlgen -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -module Filters -cynthconfig PIPELINE





ifeq ($(CWBExec_hlsc),1)
$(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/PIPELINE/stratus_hls.bdr :  ../Filters.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/Filters/PIPELINE ]; then mkdir -p $(BDW_WORKLIB)/modules/Filters/PIPELINE; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=PIPELINE BDW_CYNTH_CONFIG=PIPELINE \
	BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_rtl.v BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_rtl.cpp BDW_MODULE=Filters BDW_CYNTH_CONFIG=PIPELINE BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filters/PIPELINE BDW_HLS_CONFIG=PIPELINE BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filters/PIPELINE \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_Filters_PIPELINE) \
		-d $(BDW_WORKLIB)/modules/Filters/PIPELINE -o Filters_rtl.cpp \
		--hls_module=Filters --hls_config=PIPELINE --project=/users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_Filters_PIPELINE))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_Filters_PIPELINE))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_Filters_PIPELINE))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_Filters_PIPELINE) \
		 ../Filters.cpp
	
	
	

else

$(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/PIPELINE/stratus_hls.bdr :  ../Filters.cpp  $(BDW_LIB_DEPS)
	bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hls.Filters.PIPELINE.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/PIPELINE/stratus_hls.bdr

endif

	
	
$(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_trace.h : $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_trace.h.updated

$(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_trace.h.updated : $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module Filters -cynthconfig PIPELINE  
	@touch $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_trace.h.updated

catHLLog_Filters_PIPELINE:
	cat $(BDW_WORKLIB)/modules/Filters/PIPELINE/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_Filters_PIPELINE : hls_Filters_PIPELINE 


.PHONY: hls_Filters_PIPELINE

hls_Filters_PIPELINE hlsv_Filters_PIPELINE: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_Filters_PIPELINE)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_Filters_PIPELINE BDW_DEP_CYNTH_CONFIG=PIPELINE
else
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hlsv.Filters.PIPELINE $(MAKE) CWBExec_hlsv=1 hlsv_Filters_PIPELINE
endif

catVLGLog_Filters_PIPELINE : catHLLog_Filters_PIPELINE
	cat $(BDW_WORKLIB)/modules/Filters/PIPELINE/stratus_vlg.log

#
#	view rule
#

view_Filters_PIPELINE:
	@echo "ERROR: Schematic viewing target 'view_Filters_PIPELINE' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_rtl.o : $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_rtl.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/PIPELINE -I./ $(CCFLAGS_Filters_PIPELINE) $(EXTRACT_LIB_DASHI_Filters_PIPELINE) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_rtl.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

$(BDW_WORKLIB)/modules/Filters/PIPELINE/debug/Filters_rtl.o : $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_rtl.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/PIPELINE -I./ $(CCFLAGS_Filters_PIPELINE) $(EXTRACT_LIB_DASHI_Filters_PIPELINE) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filters/PIPELINE/debug/Filters_rtl.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_beh.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/PIPELINE -I./ $(CCFLAGS_BEH_Filters_PIPELINE) -o $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_beh.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

$(BDW_WORKLIB)/modules/Filters/PIPELINE/debug/Filters_beh.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/PIPELINE -I./ $(CCFLAGS_BEH_Filters_PIPELINE) -o $(BDW_WORKLIB)/modules/Filters/PIPELINE/debug/Filters_beh.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/PIPELINE -I./ $(CCFLAGS_COSIM_Filters_PIPELINE) -o $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_hoist.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/PIPELINE -I./ $(CCFLAGS_Filters_PIPELINE) $(EXTRACT_LIB_DASHI_Filters_PIPELINE) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_hoist.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filters/PIPELINE/debug/Filters.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/PIPELINE -I./ $(CCFLAGS_COSIM_Filters_PIPELINE) -o $(BDW_WORKLIB)/modules/Filters/PIPELINE/debug/Filters.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp


$(BDW_WORKLIB)/modules/Filters/PIPELINE/debug/Filters_hoist.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/PIPELINE -I./ $(CCFLAGS_Filters_PIPELINE) $(EXTRACT_LIB_DASHI_Filters_PIPELINE) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filters/PIPELINE/debug/Filters_hoist.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters.d :  ../Filters.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config PIPELINE of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_Filters_PIPELINE)  ../Filters.cpp \
	| sed 's|Filters\.o[ :]*|$(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_beh.o $(BDW_WORKLIB)/modules/Filters/PIPELINE/debug/Filters_beh.o $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/Filters/PIPELINE"
##############################################################

Filters_PIPELINE_SRCDIR = $(BDW_WORKLIB)/modules/Filters/PIPELINE
Filters_PIPELINE_BEH_SRCDIR = $(BDW_WORKLIB)/libs/Filters_PIPELINE
Filters_PIPELINE_LIBNAME = Filters_PIPELINE
Filters_PIPELINE_WORKLIB = $(BDW_WORKLIB)/modules/Filters/PIPELINE
Filters_PIPELINE_C_PARTS_A = $(Filters_PIPELINE_WORKLIB)/objs/libFilters_PIPELINE.a

prep_c_Filters_PIPELINE : $(Filters_PIPELINE_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_PIPELINE_WORKLIB) prep_c

prep_vlog_Filters_PIPELINE : $(Filters_PIPELINE_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_PIPELINE_WORKLIB) prep_vlog

prep_Filters_PIPELINE : $(Filters_PIPELINE_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_PIPELINE_WORKLIB) prep

$(Filters_PIPELINE_WORKLIB)/Makefile : $(Filters_PIPELINE_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(Filters_PIPELINE_WORKLIB) ]; then mkdir -p $(Filters_PIPELINE_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -scsim builtin -lib $(Filters_PIPELINE_SRCDIR) -o $(Filters_PIPELINE_WORKLIB)/Makefile -module Filters -cynthconfig PIPELINE   

$(Filters_PIPELINE_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(Filters_PIPELINE_WORKLIB) ]; then mkdir -p $(Filters_PIPELINE_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(Filters_PIPELINE_WORKLIB)/Filters_PIPELINE.d :
	@if [ ! -d $(Filters_PIPELINE_WORKLIB) ]; then mkdir -p $(Filters_PIPELINE_WORKLIB); fi
	@touch $(Filters_PIPELINE_WORKLIB)/Filters_PIPELINE.d



#
# HLS config LATENCY
#

#
#	stratus_hls rule
#
LIB_DIRS_Filters_LATENCY = 
LIB_INCLUDES_Filters_LATENCY = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filters_LATENCY))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_Filters_LATENCY = 
LIB_NAMES_FOR_VLOG_Filters_LATENCY = 
PREFIXED_LIB_NAMES_Filters_LATENCY = 
EXTRACT_LIB_DASHI_Filters_LATENCY = $(shell echo "puts stdout [extractHoistLibDashIs /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters LATENCY]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_Filters_LATENCY = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/LATENCY/c_parts -DLATENCY=1 -DBDW_RTL_Filters_LATENCY=1  $(LIB_INCLUDES_Filters_LATENCY)
CCFLAGS_COSIM_Filters_LATENCY = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/LATENCY/c_parts -DLATENCY=1 -DBDW_RTL_Filters_LATENCY=1  $(LIB_INCLUDES_Filters_LATENCY)
CCFLAGS_BEH_Filters_LATENCY = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/LATENCY/c_parts -DLATENCY=1  $(LIB_INCLUDES_Filters_LATENCY)
CCFLAGS_Filters_LATENCY += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_Filters_LATENCY += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_Filters_LATENCY += ${BDW_CCFLAGS_TAIL}

hls_Filters_LATENCY : hlsc_Filters_LATENCY

cynth_Filters_LATENCY : hlsc_Filters_LATENCY 

elab_Filters_LATENCY : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/Filters/LATENCY/stratus_hls.bdr

optim_Filters_LATENCY : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/Filters/LATENCY/stratus_hls.bdr

sched_Filters_LATENCY : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/Filters/LATENCY/stratus_hls.bdr

.PHONY: hlsc_Filters_LATENCY hls_Filters_LATENCY

hlsc_Filters_LATENCY : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_rtl.cpp BDW_DEP_CYNTH_CONFIG=LATENCY BDW_MODULE=Filters BDW_HLS_CONFIG=LATENCY
else
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hls.Filters.LATENCY $(MAKE) CWBExec_hls=1 hlsc_Filters_LATENCY
endif

clean_cynth_Filters_LATENCY: clean_hls_Filters_LATENCY

clean_Filters_LATENCY: clean_hls_Filters_LATENCY

clean_hls_Filters_LATENCY:
	@rm -rf $(BDW_WORKLIB)/modules/Filters/LATENCY
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filters.LATENCY
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filters.LATENCY.s

kill_hls_Filters_LATENCY:
	@bdw_kill -job hls.Filters.LATENCY
	@bdw_kill -job hls.Filters.LATENCY.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),LATENCY)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_Filters_LATENCY :
	bdw_htmlgen -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -module Filters -cynthconfig LATENCY





ifeq ($(CWBExec_hlsc),1)
$(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/LATENCY/stratus_hls.bdr :  ../Filters.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/Filters/LATENCY ]; then mkdir -p $(BDW_WORKLIB)/modules/Filters/LATENCY; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=LATENCY BDW_CYNTH_CONFIG=LATENCY \
	BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_rtl.v BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_rtl.cpp BDW_MODULE=Filters BDW_CYNTH_CONFIG=LATENCY BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filters/LATENCY BDW_HLS_CONFIG=LATENCY BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filters/LATENCY \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_Filters_LATENCY) \
		-d $(BDW_WORKLIB)/modules/Filters/LATENCY -o Filters_rtl.cpp \
		--hls_module=Filters --hls_config=LATENCY --project=/users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_Filters_LATENCY))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_Filters_LATENCY))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_Filters_LATENCY))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_Filters_LATENCY) \
		 ../Filters.cpp
	
	
	

else

$(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/LATENCY/stratus_hls.bdr :  ../Filters.cpp  $(BDW_LIB_DEPS)
	bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hls.Filters.LATENCY.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/LATENCY/stratus_hls.bdr

endif

	
	
$(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_trace.h : $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_trace.h.updated

$(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_trace.h.updated : $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module Filters -cynthconfig LATENCY  
	@touch $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_trace.h.updated

catHLLog_Filters_LATENCY:
	cat $(BDW_WORKLIB)/modules/Filters/LATENCY/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_Filters_LATENCY : hls_Filters_LATENCY 


.PHONY: hls_Filters_LATENCY

hls_Filters_LATENCY hlsv_Filters_LATENCY: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_Filters_LATENCY)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_Filters_LATENCY BDW_DEP_CYNTH_CONFIG=LATENCY
else
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hlsv.Filters.LATENCY $(MAKE) CWBExec_hlsv=1 hlsv_Filters_LATENCY
endif

catVLGLog_Filters_LATENCY : catHLLog_Filters_LATENCY
	cat $(BDW_WORKLIB)/modules/Filters/LATENCY/stratus_vlg.log

#
#	view rule
#

view_Filters_LATENCY:
	@echo "ERROR: Schematic viewing target 'view_Filters_LATENCY' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_rtl.o : $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_rtl.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/LATENCY -I./ $(CCFLAGS_Filters_LATENCY) $(EXTRACT_LIB_DASHI_Filters_LATENCY) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_rtl.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

$(BDW_WORKLIB)/modules/Filters/LATENCY/debug/Filters_rtl.o : $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_rtl.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/LATENCY -I./ $(CCFLAGS_Filters_LATENCY) $(EXTRACT_LIB_DASHI_Filters_LATENCY) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filters/LATENCY/debug/Filters_rtl.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_beh.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/LATENCY -I./ $(CCFLAGS_BEH_Filters_LATENCY) -o $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_beh.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

$(BDW_WORKLIB)/modules/Filters/LATENCY/debug/Filters_beh.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/LATENCY -I./ $(CCFLAGS_BEH_Filters_LATENCY) -o $(BDW_WORKLIB)/modules/Filters/LATENCY/debug/Filters_beh.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/Filters/LATENCY/Filters.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/LATENCY -I./ $(CCFLAGS_COSIM_Filters_LATENCY) -o $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_hoist.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/LATENCY -I./ $(CCFLAGS_Filters_LATENCY) $(EXTRACT_LIB_DASHI_Filters_LATENCY) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_hoist.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filters/LATENCY/debug/Filters.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/LATENCY -I./ $(CCFLAGS_COSIM_Filters_LATENCY) -o $(BDW_WORKLIB)/modules/Filters/LATENCY/debug/Filters.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp


$(BDW_WORKLIB)/modules/Filters/LATENCY/debug/Filters_hoist.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/LATENCY -I./ $(CCFLAGS_Filters_LATENCY) $(EXTRACT_LIB_DASHI_Filters_LATENCY) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filters/LATENCY/debug/Filters_hoist.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/Filters/LATENCY/Filters.d :  ../Filters.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config LATENCY of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_Filters_LATENCY)  ../Filters.cpp \
	| sed 's|Filters\.o[ :]*|$(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_beh.o $(BDW_WORKLIB)/modules/Filters/LATENCY/debug/Filters_beh.o $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/Filters/LATENCY"
##############################################################

Filters_LATENCY_SRCDIR = $(BDW_WORKLIB)/modules/Filters/LATENCY
Filters_LATENCY_BEH_SRCDIR = $(BDW_WORKLIB)/libs/Filters_LATENCY
Filters_LATENCY_LIBNAME = Filters_LATENCY
Filters_LATENCY_WORKLIB = $(BDW_WORKLIB)/modules/Filters/LATENCY
Filters_LATENCY_C_PARTS_A = $(Filters_LATENCY_WORKLIB)/objs/libFilters_LATENCY.a

prep_c_Filters_LATENCY : $(Filters_LATENCY_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_LATENCY_WORKLIB) prep_c

prep_vlog_Filters_LATENCY : $(Filters_LATENCY_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_LATENCY_WORKLIB) prep_vlog

prep_Filters_LATENCY : $(Filters_LATENCY_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_LATENCY_WORKLIB) prep

$(Filters_LATENCY_WORKLIB)/Makefile : $(Filters_LATENCY_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(Filters_LATENCY_WORKLIB) ]; then mkdir -p $(Filters_LATENCY_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -scsim builtin -lib $(Filters_LATENCY_SRCDIR) -o $(Filters_LATENCY_WORKLIB)/Makefile -module Filters -cynthconfig LATENCY   

$(Filters_LATENCY_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(Filters_LATENCY_WORKLIB) ]; then mkdir -p $(Filters_LATENCY_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(Filters_LATENCY_WORKLIB)/Filters_LATENCY.d :
	@if [ ! -d $(Filters_LATENCY_WORKLIB) ]; then mkdir -p $(Filters_LATENCY_WORKLIB); fi
	@touch $(Filters_LATENCY_WORKLIB)/Filters_LATENCY.d



#
# HLS config UNROLL_PIPE
#

#
#	stratus_hls rule
#
LIB_DIRS_Filters_UNROLL_PIPE = 
LIB_INCLUDES_Filters_UNROLL_PIPE = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filters_UNROLL_PIPE))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_Filters_UNROLL_PIPE = 
LIB_NAMES_FOR_VLOG_Filters_UNROLL_PIPE = 
PREFIXED_LIB_NAMES_Filters_UNROLL_PIPE = 
EXTRACT_LIB_DASHI_Filters_UNROLL_PIPE = $(shell echo "puts stdout [extractHoistLibDashIs /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters UNROLL_PIPE]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_Filters_UNROLL_PIPE = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/c_parts -DUNROLL_PIPE=1 -DBDW_RTL_Filters_UNROLL_PIPE=1  $(LIB_INCLUDES_Filters_UNROLL_PIPE)
CCFLAGS_COSIM_Filters_UNROLL_PIPE = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/c_parts -DUNROLL_PIPE=1 -DBDW_RTL_Filters_UNROLL_PIPE=1  $(LIB_INCLUDES_Filters_UNROLL_PIPE)
CCFLAGS_BEH_Filters_UNROLL_PIPE = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/c_parts -DUNROLL_PIPE=1  $(LIB_INCLUDES_Filters_UNROLL_PIPE)
CCFLAGS_Filters_UNROLL_PIPE += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_Filters_UNROLL_PIPE += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_Filters_UNROLL_PIPE += ${BDW_CCFLAGS_TAIL}

hls_Filters_UNROLL_PIPE : hlsc_Filters_UNROLL_PIPE

cynth_Filters_UNROLL_PIPE : hlsc_Filters_UNROLL_PIPE 

elab_Filters_UNROLL_PIPE : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/stratus_hls.bdr

optim_Filters_UNROLL_PIPE : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/stratus_hls.bdr

sched_Filters_UNROLL_PIPE : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/stratus_hls.bdr

.PHONY: hlsc_Filters_UNROLL_PIPE hls_Filters_UNROLL_PIPE

hlsc_Filters_UNROLL_PIPE : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_rtl.cpp BDW_DEP_CYNTH_CONFIG=UNROLL_PIPE BDW_MODULE=Filters BDW_HLS_CONFIG=UNROLL_PIPE
else
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hls.Filters.UNROLL_PIPE $(MAKE) CWBExec_hls=1 hlsc_Filters_UNROLL_PIPE
endif

clean_cynth_Filters_UNROLL_PIPE: clean_hls_Filters_UNROLL_PIPE

clean_Filters_UNROLL_PIPE: clean_hls_Filters_UNROLL_PIPE

clean_hls_Filters_UNROLL_PIPE:
	@rm -rf $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filters.UNROLL_PIPE
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filters.UNROLL_PIPE.s

kill_hls_Filters_UNROLL_PIPE:
	@bdw_kill -job hls.Filters.UNROLL_PIPE
	@bdw_kill -job hls.Filters.UNROLL_PIPE.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),UNROLL_PIPE)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_Filters_UNROLL_PIPE :
	bdw_htmlgen -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -module Filters -cynthconfig UNROLL_PIPE





ifeq ($(CWBExec_hlsc),1)
$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/stratus_hls.bdr :  ../Filters.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE ]; then mkdir -p $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=UNROLL_PIPE BDW_CYNTH_CONFIG=UNROLL_PIPE \
	BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_rtl.v BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_rtl.cpp BDW_MODULE=Filters BDW_CYNTH_CONFIG=UNROLL_PIPE BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE BDW_HLS_CONFIG=UNROLL_PIPE BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_Filters_UNROLL_PIPE) \
		-d $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE -o Filters_rtl.cpp \
		--hls_module=Filters --hls_config=UNROLL_PIPE --project=/users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_Filters_UNROLL_PIPE))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_Filters_UNROLL_PIPE))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_Filters_UNROLL_PIPE))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_Filters_UNROLL_PIPE) \
		 ../Filters.cpp
	
	
	

else

$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/stratus_hls.bdr :  ../Filters.cpp  $(BDW_LIB_DEPS)
	bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hls.Filters.UNROLL_PIPE.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/stratus_hls.bdr

endif

	
	
$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_trace.h : $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_trace.h.updated

$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_trace.h.updated : $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module Filters -cynthconfig UNROLL_PIPE  
	@touch $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_trace.h.updated

catHLLog_Filters_UNROLL_PIPE:
	cat $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_Filters_UNROLL_PIPE : hls_Filters_UNROLL_PIPE 


.PHONY: hls_Filters_UNROLL_PIPE

hls_Filters_UNROLL_PIPE hlsv_Filters_UNROLL_PIPE: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_Filters_UNROLL_PIPE)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_Filters_UNROLL_PIPE BDW_DEP_CYNTH_CONFIG=UNROLL_PIPE
else
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hlsv.Filters.UNROLL_PIPE $(MAKE) CWBExec_hlsv=1 hlsv_Filters_UNROLL_PIPE
endif

catVLGLog_Filters_UNROLL_PIPE : catHLLog_Filters_UNROLL_PIPE
	cat $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/stratus_vlg.log

#
#	view rule
#

view_Filters_UNROLL_PIPE:
	@echo "ERROR: Schematic viewing target 'view_Filters_UNROLL_PIPE' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_rtl.o : $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_rtl.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE -I./ $(CCFLAGS_Filters_UNROLL_PIPE) $(EXTRACT_LIB_DASHI_Filters_UNROLL_PIPE) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_rtl.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/debug/Filters_rtl.o : $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_rtl.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE -I./ $(CCFLAGS_Filters_UNROLL_PIPE) $(EXTRACT_LIB_DASHI_Filters_UNROLL_PIPE) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/debug/Filters_rtl.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_beh.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE -I./ $(CCFLAGS_BEH_Filters_UNROLL_PIPE) -o $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_beh.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/debug/Filters_beh.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE -I./ $(CCFLAGS_BEH_Filters_UNROLL_PIPE) -o $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/debug/Filters_beh.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE -I./ $(CCFLAGS_COSIM_Filters_UNROLL_PIPE) -o $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_hoist.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE -I./ $(CCFLAGS_Filters_UNROLL_PIPE) $(EXTRACT_LIB_DASHI_Filters_UNROLL_PIPE) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_hoist.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/debug/Filters.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE -I./ $(CCFLAGS_COSIM_Filters_UNROLL_PIPE) -o $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/debug/Filters.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp


$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/debug/Filters_hoist.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE -I./ $(CCFLAGS_Filters_UNROLL_PIPE) $(EXTRACT_LIB_DASHI_Filters_UNROLL_PIPE) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/debug/Filters_hoist.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters.d :  ../Filters.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config UNROLL_PIPE of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_Filters_UNROLL_PIPE)  ../Filters.cpp \
	| sed 's|Filters\.o[ :]*|$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_beh.o $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/debug/Filters_beh.o $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE"
##############################################################

Filters_UNROLL_PIPE_SRCDIR = $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE
Filters_UNROLL_PIPE_BEH_SRCDIR = $(BDW_WORKLIB)/libs/Filters_UNROLL_PIPE
Filters_UNROLL_PIPE_LIBNAME = Filters_UNROLL_PIPE
Filters_UNROLL_PIPE_WORKLIB = $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE
Filters_UNROLL_PIPE_C_PARTS_A = $(Filters_UNROLL_PIPE_WORKLIB)/objs/libFilters_UNROLL_PIPE.a

prep_c_Filters_UNROLL_PIPE : $(Filters_UNROLL_PIPE_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_UNROLL_PIPE_WORKLIB) prep_c

prep_vlog_Filters_UNROLL_PIPE : $(Filters_UNROLL_PIPE_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_UNROLL_PIPE_WORKLIB) prep_vlog

prep_Filters_UNROLL_PIPE : $(Filters_UNROLL_PIPE_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_UNROLL_PIPE_WORKLIB) prep

$(Filters_UNROLL_PIPE_WORKLIB)/Makefile : $(Filters_UNROLL_PIPE_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(Filters_UNROLL_PIPE_WORKLIB) ]; then mkdir -p $(Filters_UNROLL_PIPE_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -scsim builtin -lib $(Filters_UNROLL_PIPE_SRCDIR) -o $(Filters_UNROLL_PIPE_WORKLIB)/Makefile -module Filters -cynthconfig UNROLL_PIPE   

$(Filters_UNROLL_PIPE_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(Filters_UNROLL_PIPE_WORKLIB) ]; then mkdir -p $(Filters_UNROLL_PIPE_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(Filters_UNROLL_PIPE_WORKLIB)/Filters_UNROLL_PIPE.d :
	@if [ ! -d $(Filters_UNROLL_PIPE_WORKLIB) ]; then mkdir -p $(Filters_UNROLL_PIPE_WORKLIB); fi
	@touch $(Filters_UNROLL_PIPE_WORKLIB)/Filters_UNROLL_PIPE.d



#
# HLS config LATENCY_PIPE
#

#
#	stratus_hls rule
#
LIB_DIRS_Filters_LATENCY_PIPE = 
LIB_INCLUDES_Filters_LATENCY_PIPE = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_Filters_LATENCY_PIPE))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_Filters_LATENCY_PIPE = 
LIB_NAMES_FOR_VLOG_Filters_LATENCY_PIPE = 
PREFIXED_LIB_NAMES_Filters_LATENCY_PIPE = 
EXTRACT_LIB_DASHI_Filters_LATENCY_PIPE = $(shell echo "puts stdout [extractHoistLibDashIs /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters LATENCY_PIPE]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_Filters_LATENCY_PIPE = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/c_parts -DLATENCY_PIPE=1 -DBDW_RTL_Filters_LATENCY_PIPE=1  $(LIB_INCLUDES_Filters_LATENCY_PIPE)
CCFLAGS_COSIM_Filters_LATENCY_PIPE = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/c_parts -DLATENCY_PIPE=1 -DBDW_RTL_Filters_LATENCY_PIPE=1  $(LIB_INCLUDES_Filters_LATENCY_PIPE)
CCFLAGS_BEH_Filters_LATENCY_PIPE = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/c_parts -DLATENCY_PIPE=1  $(LIB_INCLUDES_Filters_LATENCY_PIPE)
CCFLAGS_Filters_LATENCY_PIPE += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_Filters_LATENCY_PIPE += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_Filters_LATENCY_PIPE += ${BDW_CCFLAGS_TAIL}

hls_Filters_LATENCY_PIPE : hlsc_Filters_LATENCY_PIPE

cynth_Filters_LATENCY_PIPE : hlsc_Filters_LATENCY_PIPE 

elab_Filters_LATENCY_PIPE : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/stratus_hls.bdr

optim_Filters_LATENCY_PIPE : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/stratus_hls.bdr

sched_Filters_LATENCY_PIPE : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/stratus_hls.bdr

.PHONY: hlsc_Filters_LATENCY_PIPE hls_Filters_LATENCY_PIPE

hlsc_Filters_LATENCY_PIPE : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_rtl.cpp BDW_DEP_CYNTH_CONFIG=LATENCY_PIPE BDW_MODULE=Filters BDW_HLS_CONFIG=LATENCY_PIPE
else
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hls.Filters.LATENCY_PIPE $(MAKE) CWBExec_hls=1 hlsc_Filters_LATENCY_PIPE
endif

clean_cynth_Filters_LATENCY_PIPE: clean_hls_Filters_LATENCY_PIPE

clean_Filters_LATENCY_PIPE: clean_hls_Filters_LATENCY_PIPE

clean_hls_Filters_LATENCY_PIPE:
	@rm -rf $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filters.LATENCY_PIPE
	@rm -rf $(BDW_WORKLIB)/jobs/hls.Filters.LATENCY_PIPE.s

kill_hls_Filters_LATENCY_PIPE:
	@bdw_kill -job hls.Filters.LATENCY_PIPE
	@bdw_kill -job hls.Filters.LATENCY_PIPE.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),LATENCY_PIPE)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_Filters_LATENCY_PIPE :
	bdw_htmlgen -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -module Filters -cynthconfig LATENCY_PIPE





ifeq ($(CWBExec_hlsc),1)
$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/stratus_hls.bdr :  ../Filters.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE ]; then mkdir -p $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=LATENCY_PIPE BDW_CYNTH_CONFIG=LATENCY_PIPE \
	BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_rtl.v BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_rtl.cpp BDW_MODULE=Filters BDW_CYNTH_CONFIG=LATENCY_PIPE BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE BDW_HLS_CONFIG=LATENCY_PIPE BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_Filters_LATENCY_PIPE) \
		-d $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE -o Filters_rtl.cpp \
		--hls_module=Filters --hls_config=LATENCY_PIPE --project=/users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_Filters_LATENCY_PIPE))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_Filters_LATENCY_PIPE))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_Filters_LATENCY_PIPE))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_Filters_LATENCY_PIPE) \
		 ../Filters.cpp
	
	
	

else

$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/stratus_hls.bdr :  ../Filters.cpp  $(BDW_LIB_DEPS)
	bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hls.Filters.LATENCY_PIPE.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_rtl.v $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/stratus_hls.bdr

endif

	
	
$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_trace.h : $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_trace.h.updated

$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_trace.h.updated : $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module Filters -cynthconfig LATENCY_PIPE  
	@touch $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_trace.h.updated

catHLLog_Filters_LATENCY_PIPE:
	cat $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_Filters_LATENCY_PIPE : hls_Filters_LATENCY_PIPE 


.PHONY: hls_Filters_LATENCY_PIPE

hls_Filters_LATENCY_PIPE hlsv_Filters_LATENCY_PIPE: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_Filters_LATENCY_PIPE)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_Filters_LATENCY_PIPE BDW_DEP_CYNTH_CONFIG=LATENCY_PIPE
else
	@bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job hlsv.Filters.LATENCY_PIPE $(MAKE) CWBExec_hlsv=1 hlsv_Filters_LATENCY_PIPE
endif

catVLGLog_Filters_LATENCY_PIPE : catHLLog_Filters_LATENCY_PIPE
	cat $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/stratus_vlg.log

#
#	view rule
#

view_Filters_LATENCY_PIPE:
	@echo "ERROR: Schematic viewing target 'view_Filters_LATENCY_PIPE' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_rtl.o : $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_rtl.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE -I./ $(CCFLAGS_Filters_LATENCY_PIPE) $(EXTRACT_LIB_DASHI_Filters_LATENCY_PIPE) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_rtl.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/debug/Filters_rtl.o : $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_rtl.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl Filters`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE -I./ $(CCFLAGS_Filters_LATENCY_PIPE) $(EXTRACT_LIB_DASHI_Filters_LATENCY_PIPE) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/debug/Filters_rtl.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_beh.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE -I./ $(CCFLAGS_BEH_Filters_LATENCY_PIPE) -o $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_beh.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/debug/Filters_beh.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE -I./ $(CCFLAGS_BEH_Filters_LATENCY_PIPE) -o $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/debug/Filters_beh.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE -I./ $(CCFLAGS_COSIM_Filters_LATENCY_PIPE) -o $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_hoist.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE -I./ $(CCFLAGS_Filters_LATENCY_PIPE) $(EXTRACT_LIB_DASHI_Filters_LATENCY_PIPE) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_hoist.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/debug/Filters.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.h $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE -I./ $(CCFLAGS_COSIM_Filters_LATENCY_PIPE) -o $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/debug/Filters.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp


$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/debug/Filters_hoist.o :  ../Filters.cpp $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp $(BDW_WORKLIB)/wrappers/Filters_cosim.h $(BDW_WORKLIB)/wrappers/Filters_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE -I./ $(CCFLAGS_Filters_LATENCY_PIPE) $(EXTRACT_LIB_DASHI_Filters_LATENCY_PIPE) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/debug/Filters_hoist.o  $(BDW_WORKLIB)/wrappers/Filters_wrap.cpp
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters.d :  ../Filters.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config LATENCY_PIPE of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_Filters_LATENCY_PIPE)  ../Filters.cpp \
	| sed 's|Filters\.o[ :]*|$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_beh.o $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/debug/Filters_beh.o $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE"
##############################################################

Filters_LATENCY_PIPE_SRCDIR = $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE
Filters_LATENCY_PIPE_BEH_SRCDIR = $(BDW_WORKLIB)/libs/Filters_LATENCY_PIPE
Filters_LATENCY_PIPE_LIBNAME = Filters_LATENCY_PIPE
Filters_LATENCY_PIPE_WORKLIB = $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE
Filters_LATENCY_PIPE_C_PARTS_A = $(Filters_LATENCY_PIPE_WORKLIB)/objs/libFilters_LATENCY_PIPE.a

prep_c_Filters_LATENCY_PIPE : $(Filters_LATENCY_PIPE_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_LATENCY_PIPE_WORKLIB) prep_c

prep_vlog_Filters_LATENCY_PIPE : $(Filters_LATENCY_PIPE_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_LATENCY_PIPE_WORKLIB) prep_vlog

prep_Filters_LATENCY_PIPE : $(Filters_LATENCY_PIPE_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(Filters_LATENCY_PIPE_WORKLIB) prep

$(Filters_LATENCY_PIPE_WORKLIB)/Makefile : $(Filters_LATENCY_PIPE_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(Filters_LATENCY_PIPE_WORKLIB) ]; then mkdir -p $(Filters_LATENCY_PIPE_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -scsim builtin -lib $(Filters_LATENCY_PIPE_SRCDIR) -o $(Filters_LATENCY_PIPE_WORKLIB)/Makefile -module Filters -cynthconfig LATENCY_PIPE   

$(Filters_LATENCY_PIPE_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(Filters_LATENCY_PIPE_WORKLIB) ]; then mkdir -p $(Filters_LATENCY_PIPE_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(Filters_LATENCY_PIPE_WORKLIB)/Filters_LATENCY_PIPE.d :
	@if [ ! -d $(Filters_LATENCY_PIPE_WORKLIB) ]; then mkdir -p $(Filters_LATENCY_PIPE_WORKLIB); fi
	@touch $(Filters_LATENCY_PIPE_WORKLIB)/Filters_LATENCY_PIPE.d



#
# Rules for configured systemModules
#


#
# Per-hls_config rules
#

cynth_LATENCY:  cynth_Filters_LATENCY
hlsc_LATENCY:  
	$(MAKE) -j1 hlsc_Filters_LATENCY

cynthvlg_LATENCY: hls_LATENCY
hls_LATENCY:  
	$(MAKE) -j1 hls_Filters_LATENCY

cynthvlg_LATENCY: elab_LATENCY
elab_LATENCY:  
	$(MAKE) -j1 elab_Filters_LATENCY

cynthvlg_LATENCY: optim_LATENCY
optim_LATENCY:  
	$(MAKE) -j1 optim_Filters_LATENCY

cynthvlg_LATENCY: sched_LATENCY
sched_LATENCY:  
	$(MAKE) -j1 sched_Filters_LATENCY

view_LATENCY:
	@echo "ERROR: Schematic viewing target 'view_LATENCY' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_LATENCY:
	@rm -f $(BDW_WORKLIB)/modules/Filters/LATENCY/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/LATENCY/stratus_hls.bdr


cynth_UNROLL:  cynth_Filters_UNROLL
hlsc_UNROLL:  
	$(MAKE) -j1 hlsc_Filters_UNROLL

cynthvlg_UNROLL: hls_UNROLL
hls_UNROLL:  
	$(MAKE) -j1 hls_Filters_UNROLL

cynthvlg_UNROLL: elab_UNROLL
elab_UNROLL:  
	$(MAKE) -j1 elab_Filters_UNROLL

cynthvlg_UNROLL: optim_UNROLL
optim_UNROLL:  
	$(MAKE) -j1 optim_Filters_UNROLL

cynthvlg_UNROLL: sched_UNROLL
sched_UNROLL:  
	$(MAKE) -j1 sched_Filters_UNROLL

view_UNROLL:
	@echo "ERROR: Schematic viewing target 'view_UNROLL' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_UNROLL:
	@rm -f $(BDW_WORKLIB)/modules/Filters/UNROLL/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/UNROLL/stratus_hls.bdr


cynth_LATENCY_PIPE:  cynth_Filters_LATENCY_PIPE
hlsc_LATENCY_PIPE:  
	$(MAKE) -j1 hlsc_Filters_LATENCY_PIPE

cynthvlg_LATENCY_PIPE: hls_LATENCY_PIPE
hls_LATENCY_PIPE:  
	$(MAKE) -j1 hls_Filters_LATENCY_PIPE

cynthvlg_LATENCY_PIPE: elab_LATENCY_PIPE
elab_LATENCY_PIPE:  
	$(MAKE) -j1 elab_Filters_LATENCY_PIPE

cynthvlg_LATENCY_PIPE: optim_LATENCY_PIPE
optim_LATENCY_PIPE:  
	$(MAKE) -j1 optim_Filters_LATENCY_PIPE

cynthvlg_LATENCY_PIPE: sched_LATENCY_PIPE
sched_LATENCY_PIPE:  
	$(MAKE) -j1 sched_Filters_LATENCY_PIPE

view_LATENCY_PIPE:
	@echo "ERROR: Schematic viewing target 'view_LATENCY_PIPE' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_LATENCY_PIPE:
	@rm -f $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/LATENCY_PIPE/stratus_hls.bdr


cynth_UNROLL_PIPE:  cynth_Filters_UNROLL_PIPE
hlsc_UNROLL_PIPE:  
	$(MAKE) -j1 hlsc_Filters_UNROLL_PIPE

cynthvlg_UNROLL_PIPE: hls_UNROLL_PIPE
hls_UNROLL_PIPE:  
	$(MAKE) -j1 hls_Filters_UNROLL_PIPE

cynthvlg_UNROLL_PIPE: elab_UNROLL_PIPE
elab_UNROLL_PIPE:  
	$(MAKE) -j1 elab_Filters_UNROLL_PIPE

cynthvlg_UNROLL_PIPE: optim_UNROLL_PIPE
optim_UNROLL_PIPE:  
	$(MAKE) -j1 optim_Filters_UNROLL_PIPE

cynthvlg_UNROLL_PIPE: sched_UNROLL_PIPE
sched_UNROLL_PIPE:  
	$(MAKE) -j1 sched_Filters_UNROLL_PIPE

view_UNROLL_PIPE:
	@echo "ERROR: Schematic viewing target 'view_UNROLL_PIPE' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_UNROLL_PIPE:
	@rm -f $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/UNROLL_PIPE/stratus_hls.bdr


cynth_DPA:  cynth_Filters_DPA
hlsc_DPA:  
	$(MAKE) -j1 hlsc_Filters_DPA

cynthvlg_DPA: hls_DPA
hls_DPA:  
	$(MAKE) -j1 hls_Filters_DPA

cynthvlg_DPA: elab_DPA
elab_DPA:  
	$(MAKE) -j1 elab_Filters_DPA

cynthvlg_DPA: optim_DPA
optim_DPA:  
	$(MAKE) -j1 optim_Filters_DPA

cynthvlg_DPA: sched_DPA
sched_DPA:  
	$(MAKE) -j1 sched_Filters_DPA

view_DPA:
	@echo "ERROR: Schematic viewing target 'view_DPA' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_DPA:
	@rm -f $(BDW_WORKLIB)/modules/Filters/DPA/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/DPA/stratus_hls.bdr


cynth_PIPELINE:  cynth_Filters_PIPELINE
hlsc_PIPELINE:  
	$(MAKE) -j1 hlsc_Filters_PIPELINE

cynthvlg_PIPELINE: hls_PIPELINE
hls_PIPELINE:  
	$(MAKE) -j1 hls_Filters_PIPELINE

cynthvlg_PIPELINE: elab_PIPELINE
elab_PIPELINE:  
	$(MAKE) -j1 elab_Filters_PIPELINE

cynthvlg_PIPELINE: optim_PIPELINE
optim_PIPELINE:  
	$(MAKE) -j1 optim_Filters_PIPELINE

cynthvlg_PIPELINE: sched_PIPELINE
sched_PIPELINE:  
	$(MAKE) -j1 sched_Filters_PIPELINE

view_PIPELINE:
	@echo "ERROR: Schematic viewing target 'view_PIPELINE' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_PIPELINE:
	@rm -f $(BDW_WORKLIB)/modules/Filters/PIPELINE/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/PIPELINE/stratus_hls.bdr


cynth_BASIC:  cynth_Filters_BASIC
hlsc_BASIC:  
	$(MAKE) -j1 hlsc_Filters_BASIC

cynthvlg_BASIC: hls_BASIC
hls_BASIC:  
	$(MAKE) -j1 hls_Filters_BASIC

cynthvlg_BASIC: elab_BASIC
elab_BASIC:  
	$(MAKE) -j1 elab_Filters_BASIC

cynthvlg_BASIC: optim_BASIC
optim_BASIC:  
	$(MAKE) -j1 optim_Filters_BASIC

cynthvlg_BASIC: sched_BASIC
sched_BASIC:  
	$(MAKE) -j1 sched_Filters_BASIC

view_BASIC:
	@echo "ERROR: Schematic viewing target 'view_BASIC' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_BASIC:
	@rm -f $(BDW_WORKLIB)/modules/Filters/BASIC/Filters_rtl.cpp $(BDW_WORKLIB)/modules/Filters/BASIC/stratus_hls.bdr



##############################################################################
#   start of rules for logic synthesis
##############################################################################

synth1target:
	@echo "NOTE 02926: BEGIN EXTERNAL TOOL PROCESSING"
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@if [ ! -d $(BDW_LS_CONFIG_DIR) ]; then mkdir -p $(BDW_LS_CONFIG_DIR); fi
	@rm -rf $(BDW_LS_CONFIG_LOGS)
	@$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_synthinfo.tcl
ifeq ($(BDW_USE_GRID_INT),1)
	@date +"INFO: %D %T ${@} in `pwd` BDW_LS_LIC='${BDW_LS_LIC}' BDW_LS_CMD='${BDW_LS_CMD}' STARTED"
ifeq ($(BDW_LS_LIC),)
	@echo "****** Error: synth1target FAILED because BDW_LS_LIC was not set"; exit 1
endif
endif
	@$(BDW_EXEC_CMD) bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job ls.$(BDW_LS_CONFIG).s $(BDW_LS_CMD)
ifeq ($(BDW_USE_GRID_INT),1)
	@date +"INFO: %D %T ${@} in `pwd` BDW_LS_LIC='${BDW_LS_LIC}' BDW_LS_CMD='${BDW_LS_CMD}' FINISHED"
endif


##############################################################################
#   start of rules for code analysis
##############################################################################

analysis1target:
	@echo "NOTE 02926: BEGIN EXTERNAL TOOL PROCESSING"
	@if [ ! -d $(BDW_ANALYSIS_CONFIG_DIR) ]; then mkdir -p $(BDW_ANALYSIS_CONFIG_DIR); fi
	@rm -rf $(BDW_ANALYSIS_CONFIG_LOGS)
	@$(BDW_EXEC_CMD) bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job analysis.$(BDW_ANALYSIS_CONFIG).s $(BDW_ANALYSIS_CMD) -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -aconfig $(BDW_ANALYSIS_CONFIG) 2>&1 | tee $(BDW_ANALYSIS_CONFIG_DIR)/$(BDW_ANALYSIS_CONFIG).log

##############################################################################
#   start of rules for place and route
##############################################################################

pnr1target:
	@echo "NOTE 02926: BEGIN EXTERNAL TOOL PROCESSING"
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@if [ ! -d $(BDW_PNR_CONFIG_DIR) ]; then mkdir -p $(BDW_PNR_CONFIG_DIR); fi
	@rm -rf $(BDW_PNR_LOGS)
	@$(BDW_EXEC_CMD) bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job pnr.$(BDW_PNR_CONFIG).s $(BDW_PNR_CMD) /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl $(BDW_PNR_CONFIG) 



#############################################################################
#  Rules for equivalence checking
#############################################################################
    

#############################################################################
#  Rules for Power estimation
#############################################################################
    


.INTERMEDIATE : $(BDW_LIBPREP) 

.PHONY : siminfo

siminfo :
	$(BDW_SIMCONFIG_MKDIR)
	@if [ ! -d $(BDW_WORKLIB)/INCA_libs ] ; then \
	    mkdir -p $(BDW_WORKLIB)/INCA_libs/bdw_worklib ; \
	fi	
	@echo "DEFINE bdw_worklib INCA_libs/bdw_worklib" > $(BDW_WORKLIB)/cds.lib
	@echo "DEFINE WORK bdw_worklib" > $(BDW_WORKLIB)/hdl.var
	$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_siminfo.tcl /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl $(BDW_SIM_CONFIG)


######################################################################
## Rules for building executables, shared libs, and running sims.
######################################################################

BDW_LIB_DASHI = \
	$(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
	$(addprefix -I,$(addsuffix /c_parts,$(BDW_WHOLELIB_DIRS)))

BDW_SC_DEBUG_SRC = $(shell if [ -d $(SYSTEMC)/src ]; then echo "-d $(SYSTEMC)/src"; else echo ""; fi)
BDW_SIM_CONFIG_DIR	=	$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
BDW_SIMCONFIG_MKDIR	=	@if [ ! -d $(BDW_SIMDIR)/$(BDW_SIM_CONFIG) ]; then mkdir -p $(BDW_SIMDIR)/$(BDW_SIM_CONFIG); fi
BDW_SIM_ENV_SETUP	=	BDW_SIM_CONFIG_DIR=$(BDW_SIM_CONFIG_DIR)
BDW_END_OF_SIM_CMD	=	$(BDW_SIM_ENV_SETUP) make saySimPassed
BDW_STRT_OF_SIM_CMD	=	@echo
ifneq ($(BDW_HUB_ARGV),)
    ifeq ($(BDW_DEBUG),1)
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/debug/sim_${BDW_SIM_CONFIG}.so,argv="$(shell echo $(BDW_HUB_ARGV)|sed 's/ /%/g')"
    else
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG}.so,argv="$(shell echo $(BDW_HUB_ARGV)|sed 's/ /%/g')"
    endif
else
    ifeq ($(BDW_DEBUG),1)
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/debug/sim_${BDW_SIM_CONFIG}.so
    else
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG}.so
    endif
endif
BDW_VLOGSIM_ARGSINT += +hubSetOption+bdr=$(BDW_SIM_CONFIG_DIR)/sim.bdr
ifeq ($(RUN_DEBUGGER),1)
    BDW_VLOGSIM_ARGSINT  := $(strip $(BDW_VLOGSIM_ARGSINT)),gdbgui
	BDW_PREEXEC_DEBUG = gdb &
	BDW_INLINE_DEBUG = gdb --args
endif
BDW_VLOGSIM_DEPS	=	$(COSIM_FILES) $(SIM_RTL_TARGETS) $(BDW_LIBPREP) $(BDW_ESC_LIB)

######################################################################
# Verilog RTL Code Coverage Simulation Setup
######################################################################

ifeq ($(BDW_MTI_POST_SIM_COMMANDS),)
BDW_MTI_POST_SIM_COMMANDS = 
endif

###############################################

.PHONY: run_sim

run_sim: 
	$(MAKE) $(EXECUTABLE)

scsim_$(BDW_SIM_CONFIG): $(SIM_BUILD)
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	@echo "Executing simulation: $(SIM_BUILD) $(BDW_SCSIM_ARGS) $(BDW_HUB_ARGV)"
	$(BDW_STRT_OF_SIM_CMD)
	@( $(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(BDW_INLINE_DEBUG) $(SIM_BUILD) $(BDW_SCSIM_ARGS) $(BDW_HUB_ARGV) ; \
          simstatus=$$? ; export simstatus; \
          if [ $$simstatus -ne 0 ] ; then \
            if [ $$simstatus -gt 127 ] ; then \
                echo "ERROR: simulation exited with signal $$(($$simstatus - 128))" ; \
            else echo "WARNING: exit status = $$simstatus"; fi ; \
          fi ) 2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

#####################################################################
#####################################################################
update_hierarchy: bdw_prebuild_wrappers
	@$(STRATUS_HOME)/bin/bdw_makegen /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -o Makefile.prj 


clean_sim_objs:
	@rm -rf $(SIM_OBJS) $(DEP_FILES) $(dir $(BDW_LIBREF))

bdw_sim_build: $(SIM_BUILD)
build_sim_image: bdw_prebuild_wrappers bdw_prebuild_rtl
	@$(MAKE) -j 4 bdw_sim_build

ifneq ($(BDW_TMPLNK_DIR),)
$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)$(BDW_DEBUG_DIR)/sim_$(BDW_SIM_CONFIG): $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) $(BDW_EXELINKFLAG) $(BDW_DEBUG_OPT) $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
        -Wl,--enable-new-dtags \
		-o $(BDW_TMPLNK_FILE) \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		${BDW_CPARTS_A} \
		${BDW_HUBLIBS} $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS)
		mv $(BDW_TMPLNK_FILE) $(SIM_BUILD)
else
$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)$(BDW_DEBUG_DIR)/sim_$(BDW_SIM_CONFIG): $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) $(BDW_EXELINKFLAG) $(BDW_DEBUG_OPT) $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
        -Wl,--enable-new-dtags \
		-o $(SIM_BUILD) \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		${BDW_CPARTS_A} \
		${BDW_HUBLIBS} $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS)
endif

##############################################################
## COSIM simulator rules
##############################################################

vcs: $(BDW_VLOGSIM_DEPS)
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
ifeq ($(BDW_SIM_RUNTIME),)
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcs -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo \
		-o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
		+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES)
else
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcs -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo \
		-o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
		+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		+vcs+finish+$(BDW_SIM_RUNTIME)000
endif
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do ]; then \
		echo "run" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
		echo "quit" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
	fi
	$(BDW_PREEXEC_DEBUG)
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} $(BDW_VLOGSIM_ARGS)  $(BDW_VLOGSIM_ARGSINT) \
        -ucli \
	    -i $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

vcsi: $(BDW_VLOGSIM_DEPS)
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
ifeq ($(BDW_SIM_RUNTIME),)
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcsi -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo -o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
	    +libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES)
else
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcsi -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo -o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
	    +libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		+vcs+finish+$(BDW_SIM_RUNTIME)000
endif
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do ]; then \
		echo "run" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
		echo "quit" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
	fi
	$(BDW_PREEXEC_DEBUG)
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} $(BDW_VLOGSIM_ARGS)  $(BDW_VLOGSIM_ARGSINT) \
        -ucli \
	    -l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
	    -i $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

incisive_covsetup:


xcelium incisive ncverilog: $(BDW_VLOGSIM_DEPS) incisive_covsetup
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl
	@bdw_incisive_info -cxx11_abi_compat
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
	$(BDW_PREEXEC_DEBUG)
ifeq ($(BDW_SIM_RUNTIME),)
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do ]; then \
		echo "" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "run" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
	fi
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(STRATUS_HOME)/bin/hub_ncverilog \
		-f $(BDW_SIM_CONFIG_DIR)/siminfo \
+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		+nowarn+LIBNOU $(BDW_VLOGSIM_ARGS) $(BDW_VLOGSIM_ARGSINT) \
		-l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
else
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do ]; then \
		echo "" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "run $(BDW_SIM_RUNTIME) ns" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
	fi
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(STRATUS_HOME)/bin/hub_ncverilog \
		-f $(BDW_SIM_CONFIG_DIR)/siminfo \
+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		$(BDW_VLOGSIM_ARGS) $(BDW_VLOGSIM_ARGSINT) -l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
endif
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log


export MTI_VCO_MODE = 64

mti: $(BDW_VLOGSIM_DEPS)
ifneq ($(PASSED_LOG),)
	@echo removing log.passed in mti:
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
	@if [ ! -d $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work ]; then vlib $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work; fi
	$(STRATUS_HOME)/bin/hub_vlog -work $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work \
		-f $(BDW_SIM_CONFIG_DIR)/siminfo \
		+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES)
	$(BDW_PREEXEC_DEBUG)
ifeq ($(BDW_SIM_RUNTIME),)
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ];  then echo "onbreak resume" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ; echo "run -all" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "$(BDW_MTI_POST_SIM_COMMANDS)" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; fi
else
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ]; then  echo "onbreak resume" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ; echo "run $(BDW_SIM_RUNTIME) ns" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "$(BDW_MTI_POST_SIM_COMMANDS)" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; fi
endif
	$(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	hub_vsimvlog -c -lib $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work top $(BDW_VLOG_TOP_MODS)\
		$(BDW_VLOGSIM_ARGS)  $(BDW_VLOGSIM_ARGSINT) -do $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do \
		-l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log


BDW_NCSC_64BIT = -64bit

ifneq ($(BDW_HUB_ARGV),)
BDW_NCSIM_ARGV = +systemc_args+"$(BDW_HUB_ARGV)" +BDW_VLOG_PLUSARGS+"$(BDW_HUB_ARGV)"
else
BDW_NCSIM_ARGV =
endif

ifeq ($(RUN_DEBUGGER), 1)
BDW_NCSIM_DEBUG = -layout cdebug
BDW_NCVLG_DEBUG = -layout cdebug -linedebug
else
BDW_NCSIM_DEBUG =
BDW_NCVLG_DEBUG =
endif

ncsc: incisive_covsetup
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl
	@bdw_incisive_info -cxx11_abi_compat
	$(BDW_SIMCONFIG_MKDIR)
	$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_siminfo.tcl -gen_ncsim_cmd /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl $(BDW_SIM_CONFIG)
ifneq ($(RUN_DEBUGGER),1)
	@echo "run" >>$(BDW_SIM_CONFIG_DIR)/ncsim_cmd.tcl
	@echo "exit" >>$(BDW_SIM_CONFIG_DIR)/ncsim_cmd.tcl
endif
ifneq ($(VLOG_COSIM_TOP), )
	$(BDW_STRT_OF_SIM_CMD)
	$(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	hub_ncsim \
	-work $(BDW_SIM_CONFIG) -reflib worklib $(BDW_LIBREF_ARGS) \
	-messages $(BDW_NCSC_64BIT) $(BDW_NCVLG_DEBUG) \
	$(BDW_NCSC_GCCVER) \
	-CFLAGS "-Wl,-rpath,$(STRATUS_HOME)/tools.lnx86/stratus/lib/64bit" \
	$(SIM_OBJS) \
	$(BDW_EXTRA_OBJS) \
	$(BDW_EXTRA_LIBS) \
	$(BDW_ESC_LIB) \
	$(BDW_CPARTS_A) \
	$(BDW_NCSC_FSDBLIBS) \
	$(BDW_EXTRA_LDFLAGS) \
	$(BDW_EXTRA_LIB_FLAGS) \
	$(BDW_COV_LIB_FLAGS) \
	+loadpli1=$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME)/ncvlog_ssl:ssl_bootstrap \
	-file $(BDW_SIM_CONFIG_DIR)/siminfo \
	$(BDW_VLOGCOMP_ARGS) \
	$(BDW_XRUN_ELAB) \
	$(BDW_VLOGSIM_ARGS) \
	$(BDW_VLOGSIM_ARGSINT) \
	$(BDW_VLOG_DEFINES) \
	$(BDW_INCISIVE_FRONTEND) \
	$(BDW_NCSC_INPUT_FILE) \
	$(BDW_SC_TOP) $(BDW_VLOG_TOP_MODS) $(BDW_NCSIM_ARGV) \
	$(BDW_VERILOG_TESTBENCH) \
	2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

else
	$(BDW_STRT_OF_SIM_CMD)
	$(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	hub_ncsim \
	-work $(BDW_SIM_CONFIG) -reflib worklib $(BDW_LIBREF_ARGS) \
	-messages $(BDW_NCSC_64BIT) \
	$(BDW_NCSC_GCCVER) \
	$(BDW_VLOGSIM_ARGS) $(BDW_NCSIM_DEBUG) \
	-CFLAGS "-Wl,-rpath,$(STRATUS_HOME)/tools.lnx86/stratus/lib/64bit" \
	$(BDW_XRUN_FLAGS) \
	$(SIM_OBJS) \
	$(BDW_EXTRA_OBJS) \
	$(BDW_EXTRA_LIBS) \
	$(BDW_ESC_LIB) \
	$(BDW_CPARTS_A) \
	$(BDW_NCSC_FSDBLIBS) \
	$(BDW_EXTRA_LDFLAGS) \
	$(BDW_EXTRA_LIB_FLAGS) \
	$(BDW_COV_LIB_FLAGS) \
	-file $(BDW_SIM_CONFIG_DIR)/siminfo \
	$(BDW_XRUN_ELAB) \
	$(BDW_INCISIVE_FRONTEND) \
	$(BDW_VLOG_DEFINES) \
	$(BDW_NCSC_INPUT_FILE) \
	$(BDW_SC_TOP) $(BDW_VLOG_TOP_MODS) $(BDW_NCSIM_ARGV) \
	$(BDW_VERILOG_TESTBENCH) \
	2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

endif
ifneq ($(BDW_XRUN_ELAB),-elaborate)
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
endif



##############################################################
## Rule to build the COSIM shared library
##############################################################
ifeq ($(BDW_DEBUG),1)
BDW_SHARED_LIB = $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/debug/sim_$(BDW_SIM_CONFIG).so
else
BDW_SHARED_LIB = $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG).so
endif

ifneq ($(BDW_TMPLNK_DIR),)
$(BDW_SHARED_LIB): $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB) 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) ${BDW_SHLIBFLAG} $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
        -Wl,--enable-new-dtags \
		-o $(BDW_TMPLNK_FILE)  \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		$(BDW_CPARTS_A) \
		$(BDW_HUBLIBS) $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS) \
		-lm -lcrypt -ldl \
		${BDW_LINKOUTFILTER}
		mv $(BDW_TMPLNK_FILE) $(BDW_SHARED_LIB)

else
$(BDW_SHARED_LIB): $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB) 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) ${BDW_SHLIBFLAG} $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
        -Wl,--enable-new-dtags \
		-o $(BDW_SHARED_LIB) \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		$(BDW_CPARTS_A) \
		$(BDW_HUBLIBS) $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS) \
		-lm -lcrypt -ldl \
		${BDW_LINKOUTFILTER}

endif


##############################################################
## Rule to build verilator trace and coverage support  module
##############################################################

$(BDW_WORKLIB)/objs/esc_catrace.o: $(STRATUS_HOME)/share/stratus/source/esc_catrace.cc
	$(BDW_CC)  -o $@ $(BDW_CCFLAGS) $(BDW_VERILATOR_CCFLAGS)  $<



##############################################################
## Start the stratus_ide GUI
##############################################################
workbench ide:
	$(BDW_LAUNCH_IDE_COMMAND) $(BDW_STRATUS_IDE_COMMAND) /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl

##############################################################
## Generate a Visual C++ project file
##############################################################
vcproj: $(BDW_ALL_WRAPPERS)
	$(STRATUS_HOME)/bin/bdw_vcprojgen /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl

##############################################################
## Rule to build the synthesis report
##############################################################

html_warn:
	@echo "##############################################" ; \
	echo " The HTML reports have been deprecated. " ; \
	echo " Reporting information is available in stratus_ide." ; \
	echo "" ; \
	echo -n " Do you want to generate deprecated HTML reports (y or n) [n] ? " ; \
	read resp ; \
	case $$resp in \
	y*) $(MAKE) html ;; \
	*) echo ""; echo "HTML Reports not generated." ;  \
	esac
 
html:   html_Filters_BASIC html_Filters_DPA html_Filters_UNROLL html_Filters_PIPELINE html_Filters_LATENCY html_Filters_UNROLL_PIPE html_Filters_LATENCY_PIPE html_summary

html_summary: /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl
	$(STRATUS_HOME)/bin/bdw_htmlgen -project /users/student/mr110/yslee21/ee6470/HW3/stratus/project.tcl -summary




##############################################################
## Rules to build generated library contents
##############################################################

